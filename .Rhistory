# ************************************************
python.load("cclams.py")
experiment <- python.get("ex")
dat <- python.get("transpose_data")
time <- python.get("transpose_descriptor")
# ************************************************
# transform data
# ************************************************
# find a way how to incorporate order from user
subject_order <- c("c1"=1, "c2"=2, "c3"=3, "c4"=4, "l1"=5, "l2"=6, "l3"=7, "l4"=8)
exp_column_offset <- length(subject_order) + 2
time$`Date/Time` <- as.POSIXct(time$`Date/Time`)
time$hours <- as.numeric(format(time$`Date/Time`, "%H"))
fasting_index <- grep(fasting, time$Event_Log)
refeeding_index <- grep(refeeding, time$Event_Log)
dat_frame <- lapply(dat, data.frame)
dat_frame$XY_dist <- data.frame(sqrt((dat_frame$X_Ambulatory ** 2) + (dat_frame$Y_Ambulatory **2)))
#dat_frame <- lapply(dat_frame, arrange.vars, vars=subject_order)
dat_zoo <- lapply(dat_frame, zoo, order.by=time$`Date/Time`)
dat_hour <- lapply(dat_frame, cbind.data.frame, hour = time$hour)
# ************************************************
# calculate transformation parameters
# ************************************************
records_count <- experiment$records_count
com_fact <- experiment$factors$common
intervals <- com_fact*60/20
init <- experiment$initial[[2]]
init_crop <- (init %% intervals) + 1
end <- experiment$end[[2]]
end_crop <- end %% intervals
# ************************************************
# generate results
# ************************************************
results <- lapply(dat_zoo, gen_agg_parameter, init_crop = init_crop, intervals = intervals, len = records_count)
dat_hour_mean <- lapply(dat_hour, gen_hour_agg, fasting_index, initial_start = 1)
# ************************************************
# shiny server
# ************************************************
# Define server logic
shinyServer(function(input, output) {
output$groupChar <- renderUI({
lapply(1:as.integer(input$no_groups), function(i) {
#textInput(paste("group", i), paste(c("Group ", i, " samples: "), collapse = ''), "Comma separated sample list")
isolate(textInput(paste0("n_input_", i), label = paste0("Group: ", i), value = input[[paste0("n_input_", as.character(i))]]))
})
})
output$table <- renderText({
})
group_values <- reactiveValues()
#group_values[["1"]] <- "c1"
#group_values[["2"]] <- "c2"
observe({
input$no_groups
})
output$download <- downloadHandler(
filename = function() {
paste0(format(Sys.time(), "%Y-%m-%d_%H-%M-%S"), "_clams", ".xlsx")
},
content = function(file){
clams_wb <- createWorkbook()
for (i in seq_along(names(dat_frame))) {
sheet <- createSheet(clams_wb, sheetName = names(dat_frame)[i])
for(j in seq_along(results[[i]])) {
addDataFrame(results[[i]][[j]], sheet, startRow = 2, startCol = (exp_column_offset*j - (exp_column_offset-1)))
}
row <- createRow(sheet = sheet, rowIndex = 1)
vec <- (exp_column_offset*c(1:length(com_fact)) - (exp_column_offset-1))
cells <- createCell(row, colIndex=vec)
mapply(setCellValue, cells, paste0_array_text(com_fact, " hour aggregation"))
}
saveWorkbook(clams_wb, file)
}
)
output$timePlot <- renderPlot({
ggplot(aes(x = Index, y = Value, group = Series, colour=Series),
data = fortify(results[[which(nameParameterMap$name == input$parameterSelect)]][[match(as.numeric(input$timeAggregation), com_fact)]], melt = TRUE)) +
geom_line(size=1.05) + xlab("") + ylab("") +  scale_color_manual(values=cbPalette) +
theme(legend.text=element_text(size=16), legend.key.size = unit(0.7, "cm"), axis.text = element_text(size = 12))
}, height = 650)
output$hourPlot <- renderPlot({
ggplot(melt(dat_hour_mean[[which(nameParameterMap$name == input$parameterSelect)]], id = "hour"), aes(x = hour, y = value, color = variable)) + xlab("Hour") + ylab("") +
geom_line(size=1.05) + scale_color_manual(values=cbPalette) + theme(legend.text=element_text(size=16), legend.key.size = unit(0.7, "cm"), axis.text = element_text(size = 12),
axis.title.x = element_text(size = 16))
}, height = 650)
output$meanPlot <- renderPlot({
num <- as.integer(input$no_groups)
columns_temp <- lapply(1:num, function(x) {sapply(input[[paste0("n_input_", x)]], function (y) {sapply(strsplit(y, split = ","), str_trim)})})
columns <- sapply(columns_temp, str_group_sel)
temp_df <- data.frame(results[[which(nameParameterMap$name == input$parameterSelect)]][[match(as.numeric(input$timeAggregation), com_fact)]])
group_count = sum(sapply(1:length(columns), function(x) {dim(select(temp_df, matches(columns[x])))[2]}))
names <- lapply(1:length(columns), function (x) {names(select(temp_df, matches(columns[x])))})
if(group_count > 0) {
df <-
do.call(cbind, lapply(1:length(columns), function(x) {
data.frame(rowMeans(select(data.frame(temp_df), matches(unlist(columns[x]))
)))
}))
names <- lapply(1:length(columns), function (x) {names(select(temp_df, matches(columns[x])))})
for(i in 1:length(names)) {
names(df)[i] <- paste(names[[i]], collapse='-')
}
ggplot(aes(x = Index, y = Value, group = Series, colour=Series),
data = fortify(zoo(df), melt = TRUE)) +
geom_line(size=1.05) + xlab("") + ylab("") +  scale_color_manual(values=cbPalette) +
theme(legend.text=element_text(size=16), legend.key.size = unit(0.7, "cm"), legend.position = "bottom", axis.text = element_text(size = 12))
} else {
ggplot(aes(x = Index, y = Value, group = Series, colour=Series),
data = fortify(results[[which(nameParameterMap$name == input$parameterSelect)]][[match(as.numeric(input$timeAggregation), com_fact)]], melt = TRUE)) +
geom_blank()
}
}, height = 650)
})
subjects
runApp('Google Drive/programming/clams_app')
deployApp("/Users/igor/Google Drive/programming/clams_app/")
runApp('Google Drive/programming/clams_app')
shiny::runApp('Google Drive/programming/clams_app')
?partial
??partial
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/free_wheel_running')
runApp('Google Drive/programming/free_wheel_running')
runApp('Google Drive/programming/clams_app')
?aligned_time_series
??aligned_time_series
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/fwr')
add_to_char_vector_2 <- function(vec, ...) {
for(i in seq_along(...)) {
index <- which(vec == "")[1]
stopifnot(index <= length(vec))
vec[index] <- item
}
# index <- which(vec == "")[1]
# stopifnot(index <= length(vec))
# vec[index] <- item
return(vec)
}
expDetails <- vector("character", 50)
expDetails <- add_to_char_vector_2(expDetails, "1", "2")
add_to_char_vector_2 <- function(vec, ...) {
for(i in seq_along(c(...))) {
index <- which(vec == "")[1]
stopifnot(index <= length(vec))
vec[index] <- item
}
# index <- which(vec == "")[1]
# stopifnot(index <= length(vec))
# vec[index] <- item
return(vec)
}
expDetails <- add_to_char_vector_2(expDetails, "1", "2")
add_to_char_vector_2 <- function(vec, ...) {
arguments <- c(...)
for(i in seq_along(arguments)) {
index <- which(vec == "")[1]
stopifnot(index <= length(vec))
vec[index] <- arguments[i]
}
# index <- which(vec == "")[1]
# stopifnot(index <= length(vec))
# vec[index] <- item
return(vec)
}
expDetails <- add_to_char_vector_2(expDetails, "1", "2")
runApp('Google Drive/programming/fwr')
shiny::runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
?lapply
?mapply
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
?vapply
runApp('Google Drive/programming/clams')
?mapply
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
library(rsconnect)
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
shiny::runApp('Google Drive/programming/fwr')
chron("08/22/16 18:00:00")
chron("08/22/16", "18:00:00")
dt1 <- 'chron("08/22/16", "18:00:00")
dt1 <- chron("08/22/16", "18:00:00")
dt2 <- chron("08/24/16", "12:15:00")
seq(dt1, dt2)
seq(dt1, dt2, length = 5)
?seq.dates
seq(dt1, dt2, length.  = 5)
seq.dates(dt1, dt2, length.  = 5)
seq.dates(dt1, dt2, by = "days", length.  = 5)
seq.dates(dt1, dt2, by = "days", length  = 5)
seq.dates(dt1, dt2, by = "days")
dt2 <- chron("08/29/16", "12:15:00")
seq.dates(dt1, dt2, by = "days")
seq.dates(dt1, dt2, by = 10)
seq.dates(dt1, dt2, by = seconds(10))
seq.dates(dt1, dt2, by = 1)
seq.dates(dt1, dt2)
seq.dates(dt1, dt2, length)
seq.dates(dt1, dt2, by = 0.01, length)
seq.dates(dt1, dt2, by = 0.01, length = 5)
seq.dates(dt1, dt2, by = 0.01, length.  = 5)
seq.dates(dt1, dt2, by = 0.01, length.  = 1)
seq.dates(dt1, dt2, by = 0.01, length.  = 19)
seq.dates(dt1, dt2, by = 0.1, length.  = 19)
seq.dates(dt1, dt2, by = 0.05, length.  = 19)
seq.dates(dt1, dt2, by = 0.1, length.  = 19)
seq.dates(dt1, dt2, by = 1, length.  = 19)
seq.dates(dt1, dt2, by = 0.9, length.  = 19)
seq.dates(dt1, dt2, by = 0.1, length.  = 19)
seq.dates(dt1, dt2, by = 0.0104, length.  = 19)
seq.dates(dt1, dt2, by = 0,01041666666667, length.  = 19)
seq.dates(dt1, dt2, by = 0.01041666666667, length.  = 19)
seq.dates(dt1, dt2, by = 0.01041666, length.  = 19)
seq.dates(dt1, dt2, by = 0,01041666666667, length.out  = 19)
seq.dates(dt1, dt2, by = 0,01041666666667, length.out  = 50)
seq.dates(dt1, dt2, by = 0,01041666666667, length.out  = 652)
seq.dates(dt1, dt2, by = 0,01041666666667, length.out  = 650)
seq.dates(dt1, dt2, by = 0,01041666666667, length  = 650)
seq.dates(dt1, dt2, by = 0.01041666666667, length  = 650)
seq.dates(dt1, dt2, by = 0.01041666666667, length.out  = 15)
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
seq(dt1, dt2, by = 1440/15)
dt2
seq(dt1, dt2, by = 0.011)
seq(dt1, dt2, by = (1440/15))
runApp('Google Drive/programming/fwr')
tm_int = 1440/time_interval_min
tm_int = 1440/15
tm_int
runApp('Google Drive/programming/fwr')
dt2 - dt1
chron(dt2 - dt1)
chron(dt2 - chron(dt2-dt1))
dt1
chron(dt2 - dt1) / 0.01
chron(dt2 - dt1)
(dt2 - dt1) /0.01
(dt2 - dt1) * 0.1
(dt2 - dt1) * 0.01
minutes((dt2 - dt1))
dt2-dt1
(dt2-dt1) * 24
as.integer(dt2-dt1) * 24
as.integer(dt2-dt1)
as.double(dt2-dt1)
as.double(dt2-dt1) * 24
dt1 + 1
dt1
dt1 + 0.3
dt3 <- dt1 + 0.3
(dt3-dt1)
as.double(dt3-dt1)
setwd("/Users/igor/server/rnaseq/ZFP697/")
library(ballgown)
library(RSkittleBrewer)
library(genefilter)
library(dplyr)
library(devtools)
pheno_data = read.csv(″pheno.txt″)
dat <-  ballgown(dataDir = "ballgown", samplePattern = "sample", pData=pheno_data)
library(ballgown)
library(RSkittleBrewer)
library(genefilter)
library(dplyr)
library(devtools)
pheno_data = read.csv("pheno.txt"")
dat <-  ballgown(dataDir = "ballgown", samplePattern = "sample", pData=pheno_data)
dat_filt <- subset(bg_chrX,"rowVars(texpr(bg_chrX)) >1",genomesubset=TRUE)
results_transcripts <- stattest(bg_chrX_filt, feature="transcript"",covariate="condition", getFC=TRUE, meas="FPKM")
results_transcripts <- data.frame(geneNames=ballgown::geneNames(dat_filt), geneIDs=ballgown::geneIDs(dat_filt), results_transcripts)
result_transcripts_q <- subset(results_transcripts,results_transcripts$qval<0.05)
library(ballgown)
library(RSkittleBrewer)
library(genefilter)
library(dplyr)
library(devtools)
pheno_data = read.csv("pheno.txt")
dat <-  ballgown(dataDir = "ballgown", samplePattern = "sample", pData=pheno_data)
dat_filt <- subset(bg_chrX,"rowVars(texpr(bg_chrX)) >1",genomesubset=TRUE)
results_transcripts <- stattest(bg_chrX_filt, feature="transcript"",covariate="condition", getFC=TRUE, meas="FPKM")
results_transcripts <- data.frame(geneNames=ballgown::geneNames(dat_filt), geneIDs=ballgown::geneIDs(dat_filt), results_transcripts)
result_transcripts_q <- subset(results_transcripts,results_transcripts$qval<0.05)
dat_filt <- subset(dat,"rowVars(texpr(bg_chrX)) >1",genomesubset=TRUE)
results_transcripts <- stattest(dat_filt, feature="transcript"",covariate="condition", getFC=TRUE, meas="FPKM")
results_transcripts <- data.frame(geneNames=ballgown::geneNames(dat_filt), geneIDs=ballgown::geneIDs(dat_filt), results_transcripts)
result_transcripts_q <- subset(results_transcripts,results_transcripts$qval<0.05)
dat_filt <- subset(dat,"rowVars(texpr(dat)) >1",genomesubset=TRUE)
results_transcripts <- stattest(dat_filt, feature="transcript"",covariate="condition", getFC=TRUE, meas="FPKM")
results_transcripts <- data.frame(geneNames=ballgown::geneNames(dat_filt), geneIDs=ballgown::geneIDs(dat_filt), results_transcripts)
result_transcripts_q <- subset(results_transcripts,results_transcripts$qval<0.05)
dat_filt <- subset(dat,"rowVars(texpr(dat)) >1",genomesubset=TRUE)
results_transcripts <- stattest(dat_filt, feature="transcript",covariate="condition", getFC=TRUE, meas="FPKM")
results_transcripts <- data.frame(geneNames=ballgown::geneNames(dat_filt), geneIDs=ballgown::geneIDs(dat_filt), results_transcripts)
result_transcripts_q <- subset(results_transcripts,results_transcripts$qval<0.05)
result_transcripts_q
results_transcripts
grepl("Ppargc1", results_transcripts)
grepl("Ppargc1", geneNames(dat))
filter(dat, geneNames == "Ppargc1a")
filter(result_transcripts, geneNames == "Ppargc1a")
filter(result_transcripts, geneNames == "Ppargc1a")
results_transcripts
filter(results_transcripts, geneNames == "Ppargc1a")
filter(results_transcripts, geneNames == "Ppargc1a")$id
as.double(filter(results_transcripts, geneNames == "Ppargc1a")$id)
as.int(filter(results_transcripts, geneNames == "Ppargc1a")$id)
as.integer(filter(results_transcripts, geneNames == "Ppargc1a")$id)
filter(results_transcripts, geneNames == "Ppargc1a")$id
plotTranscripts(ballgown::geneIDs(dat)[83766], dat, main=c('Gene'), sample=c('sample01'))
filter(results_transcripts, geneNames == "Dvl1")$id
plotTranscripts(ballgown::geneIDs(dat)[80869], dat, main=c('Gene'), sample=c('sample01'))
filter(results_transcripts, geneNames == "Dvl2")$id
filter(results_transcripts, geneNames == "Dvl3")$id
plotTranscripts(ballgown::geneIDs(dat)[40188], dat, main=c('Gene'), sample=c('sample01'))
plotTranscripts(ballgown::geneIDs(dat)[40189], dat, main=c('Gene'), sample=c('sample01'))
filter(results_transcripts, geneNames == "Dvl2")$id
plotTranscripts(ballgown::geneIDs(dat)[40189], dat, main=c('Dvl3'), sample=c('sample02'))
plotTranscripts(ballgown::geneIDs(dat)[40189], dat, main=c('Dvl3'), sample=c('sample03'))
plotTranscripts(ballgown::geneIDs(dat)[40189], dat, main=c('Dvl3'), sample=c('sample04'))
shiny::runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
?hours
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
library(rsconnect)
rsconnect::setAccountInfo(name='icervenka', token='83691CB94CACF80D18CBB691C6980688', secret='AOOFvmzfHSQjuhptOHFQOQFveKcx7QiMWbJe+FaR')
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
rsconnect::deployApp(server = "shinyapps.io")
rsconnect::deployApp("/Users/igor/Google Drive/programming/clams/")
rsconnect::deployApp("/Users/igor/Google Drive/programming/clams/")
shiny::runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
?aggregate
runApp('Google Drive/programming/fwr')
shiny::runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
shiny::runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp()
runApp()
runApp()
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
?format
?format.chron
format.chron
format.chron()
chron.format
format.dates
?format.dates
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp()
runApp()
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
dat_hour
dat_frame
runApp('Google Drive/programming/clams')
?rep
rep("numeric", times = 22)
c("text", "numeric", "text", "text", "numeric", rep("numeric", times = 22), "text")
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
first_phase_change_dt
init_crop
init_phase
intervals
subjects
first_phase_change_dt
time_interval_min
runApp('Google Drive/programming/clams')
time_interval_min
as.numeric(tms[2] - tms[1])*24*60
as.integer(as.numeric(tms[2] - tms[1])*24*60)
globalValues$com_fact
init_crop
runApp('Google Drive/programming/clams')
runApp()
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicAlignments")
biocLite("Rsubread")
install.packages("AbsFilterGSEA")
setwd("/Users/igor/Google Drive/programming/clams_generate_file/")
ls
ls()
dir()
library(readr)
clams = read_csv("2017-05-14_result_all.csv")
clams
clams_xls = read_excel("2017-05-14_result_all.csv")
librar(xlsx)
library(xlsx)
clams_xls = read_excel("2017-05-14_result_all.csv")
library(readxl)
clams_xls = read_excel("2017-05-14_result_all.csv")
clams_xls = read_excel("temp.xlsx")
clams_xls
shiny::runApp('~/Google Drive/programming/clams')
clams
clams_xls
sanitize_header_string <- function(string) {
vapply(string, gsub, pattern = " ", character(1), replace = "_") %>%
vapply(gsub, pattern = "-", character(1), replace = "_") %>%
vapply(gsub, pattern = "\\.", character(1), replace = "") %>%
return()
}
names(clams) <- sanitize_header_string(names(clams))
clams
xls
clams_xls
runApp('~/Google Drive/programming/clams')
runApp('~/Google Drive/programming/clams')
subject_order
subjects
Q
runApp('~/Google Drive/programming/clams')
header
data_column_index
dat_frame
subjects
data_column_index
runApp('~/Google Drive/programming/clams')
runApp('~/Google Drive/programming/clams')
runApp('~/Google Drive/programming/clams')
runApp('~/Google Drive/programming/clams')
clams
clams_xls
runApp('~/Google Drive/programming/clams')
clams
clams_xls
clams
head(clams, 30)
head(clams_xls, 30)
head(clams_xls, 10)
clams_xls$`Date/Time`
clams$`Date/Time`
runApp('~/Google Drive/programming/clams')
runApp('~/Google Drive/programming/clams')
first_phase_change_dt
phase_change_time
as.character(first_phase_change_dt - phase_change_time)
tms - as.character(first_phase_change_dt - phase_change_time)
tms
as.character(first_phase_change_dt - phase_change_time)
runApp('~/Google Drive/programming/clams')
first_phase_change_dt
phase_change_time
as.character(first_phase_change_dt - phase_change_time)
first_phase_change_dt - phase_change_time
runApp('~/Google Drive/programming/clams')
first_phase_change_dt
phase_change_time
first_phase_change_dt - phase_change_time
as.character(first_phase_change_dt - phase_change_time)
runApp('~/Google Drive/programming/clams')
first_phase_change_dt
as.character(first_phase_change_dt - phase_change_time)
tms - as.character(first_phase_change_dt - phase_change_time)
runApp('~/Google Drive/programming/clams')
