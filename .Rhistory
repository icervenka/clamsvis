gene <- names(geneList)[abs(geneList) > 0.6]
edo =  enrichDO(gene          = gene,
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
minGSSize     = 5,
maxGSSize     = 500,
qvalueCutoff  = 0.05,
readable      = FALSE)
edo
r = data.frame(edo)
View(r)
install.packages('homologene')
library(homologene)
mouse2human(gene)
gene
homologene(c('Eno2','17441'), inTax = 10090, outTax = 9606)
homologene(c('13807','17441'), inTax = 10090, outTax = 9606)
homologene(c('11044','51294'), inTax = 10090, outTax = 9606)
homologene(c('11044','51294'), inTax = 9606, outTax = 10090)
human2mouse(genes = )
human2mouse(gene)
human2mouse(gene, db = homologeneData2)
m2h = mouse2human(gene, db = homologeneData2)
m2h
m2h = human2mouse(gene, db = homologeneData2)
m2h
m2h$humanID
ids
m2h = m2h %>% select(humanID, mouseID)
library(dplyr)
m2h = m2h %>% select(humanID, mouseID)
m2h = m2h %>% dplyr::select(humanID, mouseID)
m2h
ids_merge = merge(ids, m2h, by.x = "ENTREZID", by.y = "mouseID")
View(ids_merge)
ids_merge = merge(ids, m2h, by.x = "ENTREZID", by.y = "humanID")
View(ids_merge)
add_human_id = function(id_df) {
genes = id_df[["ENTREZID"]]
m2h = human2mouse(genes, db = homologeneData2)
m2h = m2h %>% dplyr::select(humanID, mouseID)
id_mergre = merge(id_df, m2h, by.x = "ENTREZID", by.y = "humanID")
return(id_merge)
}
add_human_id(ids)
add_human_id = function(id_df) {
genes = id_df[["ENTREZID"]]
m2h = human2mouse(genes, db = homologeneData2)
m2h = m2h %>% dplyr::select(humanID, mouseID)
id_merge = merge(id_df, m2h, by.x = "ENTREZID", by.y = "humanID")
return(id_merge)
}
add_human_id(ids)
add_human_id = function(id_df) {
genes = id_df[["ENTREZID"]]
m2h = human2mouse(genes, db = homologeneData2)
m2h = m2h %>% dplyr::select(humanID, mouseID)
id_merge = merge(id_df, m2h, by.x = "ENTREZID", by.y = "humanID")
names(idmerge)[4] = "ENTREZID_HUMAN"
return(id_merge)
}
add_human_id(ids)
add_human_id = function(id_df) {
genes = id_df[["ENTREZID"]]
m2h = human2mouse(genes, db = homologeneData2)
m2h = m2h %>% dplyr::select(humanID, mouseID)
id_merge = merge(id_df, m2h, by.x = "ENTREZID", by.y = "humanID")
names(id_merge)[4] = "ENTREZID_HUMAN"
return(id_merge)
}
add_human_id(ids)
er
df_filter = merge(ids, er, by.x = id_type, by.y = id_column_name)
id_type = "ENSEMBL"
df_filter = merge(ids, er, by.x = id_type, by.y = id_column_name)
id_column_name = "ensembl_gene_id"
df_filter = merge(ids, er, by.x = id_type, by.y = id_column_name)
df_filter
df = read.delim("E:/OneDrive/_Ruaslab/01_projects/14_eva_blomstrand_human_exercise/1811081839_deseq/ER0_pre_filtered.txt", sep = '\t')
df = read.delim("E:/OneDrive/_Ruaslab/01_projects/14_eva_blomstrand_human_exercise/1811081839_deseq/ER0_pre_filtered.txt", sep = '\t')
ids <- bitr(df[, 1], fromType=id_type, toType=c("ENTREZID", "ENSEMBL", "SYMBOL"), OrgDb=org_db_string)
if(sp_arr["common"] == "mouse") {
ids = add_human_id(ids)
}
df_filter = merge(ids, er, by.x = id_type, by.y = id_column_name)
df_filter = merge(ids, df, by.x = id_type, by.y = id_column_name)
View(df_filter)
fc_column_name = "log2FoldChange"
padj_column_name = "padj"
geneList = df_filter[,fc_column_name]
geneList
names(geneList) = as.character(ids[, "ENTREZID"])
geneList
geneList = sort(geneList, decreasing = T)
geneList
gene <- names(geneList)[abs(geneList) > fc_threshold]
fc_threshold = 0.6
gene <- names(geneList)[abs(geneList) > fc_threshold]
geneList_up = geneList[geneList > 0]
geneList_down = geneList[geneList < 0]
geneList_down
threshold_filter = function(glist, thr, names = T) {
if(names = T) {
names(glist)[abs(glist) > thr]
} else {
glist[abs(glist) > thr]
}
}
threshold_filter = function(glist, thr, names = T) {
if(names == T) {
names(glist)[abs(glist) > thr]
} else {
glist[abs(glist) > thr]
}
}
edo =  enrichDO(gene          = threshold_filter(geneList, fc_threshold),
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
minGSSize     = 5,
maxGSSize     = 500,
qvalueCutoff  = 0.05,
readable      = FALSE)
edo
edo =  enrichDO(gene          = threshold_filter(geneList_up, fc_threshold),
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
minGSSize     = 5,
maxGSSize     = 500,
qvalueCutoff  = 0.05,
readable      = FALSE)
edo
edo =  enrichDO(gene          = threshold_filter(geneList_down, fc_threshold),
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
minGSSize     = 5,
maxGSSize     = 500,
qvalueCutoff  = 0.05,
readable      = FALSE)
edo
reverse()
edo =  enrichDO(gene          = threshold_filter(reverse(geneList_down), fc_threshold),
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
minGSSize     = 5,
maxGSSize     = 500,
qvalueCutoff  = 0.05,
readable      = FALSE)
rev(geneList_down)
edo =  enrichDO(gene          = threshold_filter(rev(geneList_down), fc_threshold),
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
minGSSize     = 5,
maxGSSize     = 500,
qvalueCutoff  = 0.05,
readable      = FALSE)
edo
edo =  enrichDO(gene          = threshold_filter((geneList_down), fc_threshold),
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
minGSSize     = 5,
maxGSSize     = 500,
qvalueCutoff  = 0.05,
readable      = FALSE)
edo
enrichDO_wrapper = function(list) {
enrichDO(
gene  = threshold_filter(list, fc_threshold),
ont  = "DO",
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize  = 500,
qvalueCutoff = 0.05,
readable  = FALSE
)
}
enrichDO_wrapper()
enrichDO_wrapper(geneList)
gene_lists = list(
"all" = geneList,
"up" = geneList[geneList > 0],
"down" = geneList[geneList < 0]
)
View(gene_lists)
gene_lists_go = list(
"all" = geneList,
"up" = geneList[geneList > 0],
"down" = geneList[geneList < 0]
)
geneList_do = df_filter[,fc_column_name]
if(sp_arr["common"] == "mouse") {
names(geneList_do) = as.character(ids[, "ENTREZID_HUMAN"])
} else {
names(geneList_do) = as.character(ids[, "ENTREZID"])
}
geneList_do = sort(geneList, decreasing = T)
gene_lists_do = list(
"all" = geneList_do,
"up" = geneList_do[geneList_do > 0],
"down" = geneList_do[geneList_do < 0]
)
View(gene_lists_do)
View(gene_lists_go)
?enrichMeSH
install.packages("meshes")
BiocManager::install("meshes")
?enrichMeSH
library(meshes)
?enrichMeSH
mapply(rep, 1:4, 4:1)
a = rep(mesh_databases, length(mesh_cataegories))
mesh_categories = c("B","C","D","G")
mesh_databases = c("gendoo", "gene2pubmed")
a = rep(mesh_databases, length(mesh_categories))
rep(mesh_databases, length(mesh_categories))
rep(mesh_categories, length(mesh_databases))
rep.int(mesh_databases, length(mesh_categories))
rep_len
?rep_len
rep(mesh_databases, each = length(mesh_categories))
rep(mesh_categories, length(mesh_databases))
sample_expression <- read_delim("OneDrive/_Ruaslab/01_projects/14_eva_blomstrand_human_exercise/1811081839_deseq/sample_expression.csv", "\t", escape_double = FALSE, trim_ws = TRUE)
sample_expression <- read_delim("OneDrive/_Ruaslab/01_projects/14_eva_blomstrand_human_exercise/1811081839_deseq/sample_expression.csv", "\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
sample_expression <- read_delim("OneDrive/_Ruaslab/01_projects/14_eva_blomstrand_human_exercise/1811081839_deseq/sample_expression.csv", "\t", escape_double = FALSE, trim_ws = TRUE)
sample_expression <- read_delim("E:/OneDrive/_Ruaslab/01_projects/14_eva_blomstrand_human_exercise/1811081839_deseq/sample_expression.csv", "\t", escape_double = FALSE, trim_ws = TRUE)
htseq_pheno <- read_csv("E:/OneDrive/_Ruaslab/01_projects/14_eva_blomstrand_human_exercise/htseq_pheno.txt", col_names = FALSE)
pre_cols = htseq_pheno[htseq_pheno$X3 == "pre", 1]$X1
er0_cols = htseq_pheno[htseq_pheno$X3 == "ER0", 1]$X1
er90_cols = htseq_pheno[htseq_pheno$X3 == "ER90", 1]$X1
rr0_cols = htseq_pheno[htseq_pheno$X3 == "RR0", 1]$X1
rr90_cols = htseq_pheno[htseq_pheno$X3 == "RR90", 1]$X1
shiny::runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp()
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
shiny::runApp('E:/OneDrive/programming/clams')
runApp()
runApp('E:/OneDrive/programming/clams')
runApp()
runApp('E:/OneDrive/programming/clams')
?icon
runApp('E:/OneDrive/programming/clams')
no_groups = lenth(groups)
no_groups = length(groups)
group_list = lapply(1:no_groups, function(x) {
input[[paste0("group_no_", x)]]
})
group_list = groups
group_list[sapply(group_list, is.null)] <- list("")
View(group_list)
group_list = groups
group_list[sapply(group_list, is.null)] <- list("")
group_list <- rapply(lapply(group_list, strsplit, ","), str_trim, how = "list") %>%
lapply(unlist)
group_list
data_nest %>% select(subject, cropped) %>% unnest(cropped) %>% select(subject, interval, light, parameter)
data_nest %>% select(subject, cropped) %>% unnest(cropped) %>% select(subject, interval, light, vo2)
# selected_aggregation = paste0("t", input$select_aggregation)
# selected_parameter = input$select_parameter
# selected_cumulative = input$select_cumulative
selected_aggregation = "t60"
selected_parameter = "vo2"
selected_cumulative = FALSE
aggregated_df = map2_dfr(data_nest$cropped,
data_nest$subject,
.f = aggregate_parameter,
aggdf,
selected_parameter,
selected_aggregation,
aggregate_by(selected_parameter),
ifelse(selected_cumulative == "2", TRUE, FALSE))
aggregated_df
aggregated_df %>% filter(subject %in% group_list[[1]])
aggregated_df %>% filter(subject %in% group_list[[1]]) %>% group_by(interval)
aggregated_df %>% filter(subject %in% group_list[[1]]) %>% group_by(interval) %>% summarise(mean = mean(parameter), light = first(light))
tt = aggregated_df %>% filter(subject %in% group_list[[1]]) %>% group_by(interval) %>% summarise(mean = mean(parameter), light = first(light))
View(tt)
tt = aggregated_df %>% filter(subject %in% group_list[[1]]) %>% group_by(interval) %>% summarise(mean = mean(parameter), sd = sd(parameter), light = first(light))
library(broom)
aggregated_df
dt_result = aggregated_df %>% group_by(subject) %>% do(tidy(t.test(parameter~light, data=.)))
View(dt_result)
dt_result = aggregated_df %>% group_by(light) %>% do(tidy(t.test(parameter~subject, data=.)))
dt_result = aggregated_df %>% group_by(light) %>% do(tidy(t.test(parameter~light, data=.)))
dt_result = aggregated_df %>% group_by(subject) %>% do(tidy(t.test(parameter~light, data=.)))
?pairwise.t.test
View(aggregated_df)
pairwise.t.test(aggregated_df$parameter, aggregated_df$subject)
pairwise.t.test(aggregated_df$parameter, aggregated_df$subject, p.adjust.method = "BH")
tidy(pairwise.t.test(aggregated_df$parameter, aggregated_df$subject, p.adjust.method = "BH"))
tidy(pairwise.t.test(aggregated_df$parameter, aggregated_df$subject, p.adjust.method = "none"))
tidy(pairwise.t.test(aggregated_df$parameter, aggregated_df$subject, p.adjust.method = "bonferroni"))
group_list
names(group_list) = map(1:length(group_list) function(x) paste0("Group",x))
names(group_list) = map(1:length(group_list), function(x) paste0("Group",x))
group_list
names(group_list) = map_dfr(1:length(group_list), function(x) paste0("Group",x))
names(group_list) = map_dfr(1:length(group_list), function(x) cbind.data.frame(group_list[[x]], paste0("Group", x)))
map_dfr(1:length(group_list), function(x) cbind.data.frame(group_list[[x]], paste0("Group", x)))
map_dfr(1:length(group_list), function(x) cbind.data.frame(subject = group_list[[x]], group =  paste0("Group", x), stringsAsFactors = FALSE))
group_df = map_dfr(1:length(group_list), function(x) cbind.data.frame(subject = group_list[[x]], group =  paste0("Group", x), stringsAsFactors = FALSE))
View(group_df)
merge(aggregated_df, group_df, by = "subject")
View(aggregated_df)
group_aggregated_df = merge(aggregated_df, group_df, by = "subject")
View(group_aggregated_df)
?pairwise.t.test
tidy(pairwise.t.test(group_aggregated_df$interval, aggregated_df$group, p.adjust.method = "BH"))
tidy(pairwise.t.test(group_aggregated_df$parameter, aggregated_df$group, p.adjust.method = "BH"))
tidy(pairwise.t.test(group_aggregated_df$parameter, group_aggregated_df$group, p.adjust.method = "BH"))
tidy(pairwise.t.test(group_aggregated_df$interval, group_aggregated_df$group, p.adjust.method = "BH"))
group_aggregated_df$interval
max(group_aggregated_df$interval)
map(1:max(group_aggregated_df$interval), function(x) {
group_aggregated_df %>% filter(interval == x) %>%
tidy(pairwise.t.test(group_aggregated_df$parameter, group_aggregated_df$group, p.adjust.method = "BH"))
})
1:max(group_aggregated_df$interval)
group_aggregated_df %>% dplyr::filter(interval == 1)
map(1:max(group_aggregated_df$interval), function(x) {
int_df = group_aggregated_df %>% dplyr::filter(interval == x)
tidy(pairwise.t.test(int_df$parameter, int_df$group, p.adjust.method = "BH"))
})
map(1:max(group_aggregated_df$interval), function(x) {
int_df = group_aggregated_df %>% dplyr::filter(interval == x)
cbind.data.frame(tidy(pairwise.t.test(int_df$parameter, int_df$group, p.adjust.method = "BH")), interval = x)
})
map(1:max(group_aggregated_df$interval), function(x) {
int_df = group_aggregated_df %>% dplyr::filter(interval == x)
cbind.data.frame(tidy(pairwise.t.test(g1 = int_df$parameter, g2 = int_df$group, p.adjust.method = "BH")), interval = x)
})
map_dfr(1:max(group_aggregated_df$interval), function(x) {
int_df = group_aggregated_df %>% dplyr::filter(interval == x)
cbind.data.frame(tidy(pairwise.t.test(int_df$parameter, int_df$group, p.adjust.method = "BH")), interval = x)
})
pvals %>% dplyr::mutate(p.adj = p.adjust(p.value, p.adjust.methods = "BH"))
pvals = map_dfr(1:max(group_aggregated_df$interval), function(x) {
int_df = group_aggregated_df %>% dplyr::filter(interval == x)
cbind.data.frame(tidy(pairwise.t.test(int_df$parameter, int_df$group, p.adjust.method = "none")), interval = x)
})
pvals %>% dplyr::mutate(p.adj = p.adjust(p.value, p.adjust.methods = "BH"))
?p.adjust
pvals %>% dplyr::mutate(p.adj = p.adjust(p.value, method = "BH"))
pvals = map_dfr(1:max(group_aggregated_df$interval), function(x) {
int_df = group_aggregated_df %>% dplyr::filter(interval == x)
cbind.data.frame(interval = x, tidy(pairwise.t.test(int_df$parameter, int_df$group, p.adjust.method = "none")))
})
pvals %>% dplyr::mutate(p.adj = p.adjust(p.value, method = "BH"))
pvals = pvals %>% dplyr::mutate(p.adj = p.adjust(p.value, method = "BH"))
View(pvals)
shiny::runApp('E:/OneDrive/programming/clams')
runApp('E:/OneDrive/programming/clams')
column_specs = read_delim("clams_column_specification.txt", delim = '\t')
setwd("E:/OneDrive/programming/clams")
data = read_delim("2019-10-16_tse.csv", delim = ',',col_types = "cicdiddddiiiiiiiiddc")
interval = 2
data$temp = NULL
data$events = NULL
subject_list = unique(data$subject)
print(subject_list)
column_specs = read_delim("clams_column_specification.txt", delim = '\t')
print(column_specs)
server <- function(input, output) {
theme_set(theme_bw(base_size = 18))
global_vars = reactiveValues()
setwd("E:/OneDrive/programming/clams")
data = read_delim("2019-10-16_tse.csv", delim = ',',col_types = "cicdiddddiiiiiiiiddc")
interval = 2
# file <- input$file1
# ext <- tools::file_ext(file)[1]
# print(file)
# # if file is not uploaded provide temp file to show results
# if(is.null(file)) {
#   file <- read_delim("2019-10-16_tse.csv", delim = ',',col_types = "cicdiddddiiiiiiiiddc")
#   print(file)
# } else if(toupper(ext) == "CSV" | toupper(ext) == "TXT") {
#   file.rename(file$datapath,
#               paste(file$datapath, ext, sep="."))
#   file <- read_csv(paste(file$datapath, ext, sep="."))
# }
data$temp = NULL
data$events = NULL
subject_list = unique(data$subject)
print(subject_list)
column_specs = read_delim("clams_column_specification.txt", delim = '\t')
print(column_specs)
aggregate_by = function(x)
parameters = column_specs %>% dplyr::filter(parameter == 1) %>% select(name_app) %>% pull
names(parameters) = column_specs %>% filter(parameter == 1) %>% select(display_app) %>% pull
time_aggregation_values = intersect(seq(interval, 24*60, by = interval),
c(divisors(12*60)[-1], 1440))
time_aggregation_repeats = time_aggregation_values / interval
print(parameters)
data_subject = data %>% dplyr::group_by(subject) %>% nest()
data_subject = data_subject %>%
mutate(first_night_interval = map(data, . %>% dplyr::filter(light == 0) %>% top_n(1, -interval) %>% dplyr::select(interval) %>% as.numeric),
no_records = map(data, . %>% dplyr::count() %>% as.numeric),
cropped_records = map2_dbl(.x = data, .y = first_night_interval, function(x, y) {(x %>% dplyr::count() %>% as.numeric) + 1 - y}))
min_records = min(data_subject$cropped_records)
data_subject = data_subject %>%
mutate(cropped = modify2(data, first_night_interval, function(x, y, mm) {
x %>% dplyr::filter(interval >= y & interval <= (mm + y))
}, mm = min_records))
aggdf = map_dfc(time_aggregation_repeats, .f = create_aggregation_vector, data_subject$cropped_records[[1]])
names(aggdf) = paste0("t",time_aggregation_values)
print(aggdf)
global_vars$data_subject = data_subject
global_vars$aggdf = aggdf
global_vars$column_specs = column_specs
global_vars$parameters = parameters
global_vars$subject_list = subject_list
global_vars$time_aggregation_values = time_aggregation_values
global_vars$time_aggregation_repeats = time_aggregation_repeats
source("sidebar_items_server.R", local = TRUE)
source("individual_plot_server.R", local = TRUE)
source("grouped_plot_server.R", local = TRUE)
source("daily_individual_plot_server.R", local = TRUE)
source("daily_grouped_plot_server.R", local = TRUE)
source("hour_plot.R", local = TRUE)
source("download.R", local = TRUE)
}
runApp()
runApp()
column_specs = read_delim("clams_column_specification.txt", delim = '\t')
runApp()
column_specs = read_delim("clams_column_specification.txt", delim = '\t', local = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
aggregate_with_specs = function(specs) {
function(select_param) {
by = specs %>% dplyr::filter(name_app == select_param) %>% dplyr::select(aggregate) %>% as.character
return(by)
}
}
aggregate_by = aggragate_with_specs(column_specs)
aggregate_by = aggregate_with_specs(column_specs)
aggregate_by("vo2")
column_specs = NULL
aggregate_by("vo2")
runApp()
column_specs = read_delim("clams_column_specification.txt", delim = '\t')
View(column_specs)
View(column_specs)
aggregate_with_specs = function(specs) {
function(select_param) {
by = specs %>% dplyr::filter(name_app == select_param) %>% dplyr::select(aggregate) %>% as.character
return(by)
}
}
aggregate_by = aggregate_with_specs(column_specs)
aggregate_by("vo2")
aggregate_by("xyt")
column_specs = NULL
aggregate_by("xyt")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(gridExtra)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?as.factor
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
