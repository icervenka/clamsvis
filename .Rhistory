options(java.parameters = "-Xmx2048m")
# functions -----------------------------------------------
create_aggregation_vector = function(length, each) {
# vec = map_dfc(repeats, function(x) {
#   c(rep(NA, skip_start-1), rep(1:length, each = x, length.out = length+1))
# })
vec = c(rep(1:length, each = each, length.out = length))
return(vec)
}
create_aggregation_vector = function(each, length) {
# vec = map_dfc(repeats, function(x) {
#   c(rep(NA, skip_start-1), rep(1:length, each = x, length.out = length+1))
# })
vec = c(rep(1:length, each = each, length.out = length))
return(vec)
}
aggregate_parameter = function(data, subject, aggregation, parameter = "vo2", time = "t2", by = "mean") {
tmp = aggregate(data %>% dplyr::select(parameter), aggregation %>% dplyr::select(time), by)
return(cbind.data.frame(tmp, subject, stringsAsFactors = F))
}
aggregate_by = function(parameter) {
by = column_specs %>% dplyr::filter(name_app == select_param) %>% dplyr::select(aggregate) %>% as.character
return(by)
}
# constants -----------------------------------------------
#TODO verify that all intervals are the same
# will inferred from data
interval = 2
# will be selectable
select_param = "rer"
select_agg = "t360"
fasting <- "Fasting"
refeeding <- "Refeeding"
# will be selectable
subject_list = c("1001", "1002", "1003", "1004", "1005", "1003", "1016")
# load data -----------------------------------------------
setwd("E:/OneDrive/programming/clams/")
#setwd("~/OneDrive/programming/clams/")
column_specs = read_delim("clams_column_specification.txt", delim = '\t')
# -1 -1  is because temp and light is still present in this iteration
parameters = column_specs$name_app[!is.na(column_specs$aggregate)][-1][-1]
data = read_delim("2019-10-16_tse.csv", delim = ',',
col_types = "cicdiddddiiiiiiiiddc")
data$temp = NULL
data$events = NULL
# analysis ------------------------------------------------
time_aggregation_values = intersect(seq(interval, 24*60, by = interval),
c(divisors(12*60)[-1], 1440))
time_aggregation_repeats = time_aggregation_values / interval
data_nest = data %>% group_by(subject) %>% nest()
data_nest = data_nest %>%
mutate(first_night_interval = map(data, . %>% dplyr::filter(light == 0) %>% top_n(1, -interval) %>% dplyr::select(interval) %>% as.numeric),
no_records = map(data, . %>% count() %>% as.numeric),
cropped_records = map2_dbl(.x = data, .y = first_night_interval, function(x, y) {(x %>% count() %>% as.numeric) + 1 - y}))
#min records not implemented
#min_records = min(map2_dbl(data_nest$cropped_records, data_nest$first_night_interval, `-`))
min_records = min(data_nest$cropped_records)
data_nest = data_nest %>%
mutate(cropped = modify2(data, first_night_interval, function(x, y, mm) {
x %>% dplyr::filter(interval >= y & interval <= (mm + y))
}, mm = min_records))
# data_nest = data_nest %>%
#   mutate(aggdf = map2(no_records, first_night_interval, .f = create_aggregation_vector, time_aggregation_repeats))
# data_nest = data_nest %>%
#   mutate(aggdf = list(map2_dfc(cropped_records, time_aggregation_repeats, .f = create_aggregation_vector)))
aggdf = map_dfc(time_aggregation_repeats, .f = create_aggregation_vector, data_nest$cropped_records[[1]])
names(aggdf) = paste0("t",time_aggregation_values)
# param_time_grid = expand.grid(param = parameters, time = names(aggdf), stringsAsFactors = F)
#
# all_agg_param = map_dfr(data_nest$cropped, function(x, ptg, aggdf) {
#   map2(ptg$param, ptg$time, function(y, z, aggdf) {
#     aggregate(x %>% select(y), aggdf %>% select(z), mean)
#     #names(pt_agg) = c("param", "time")
#   }, aggdf = aggdf)
# }, ptg = param_time_grid, aggdf = aggdf)
#
#
# tt = map2_dfr(param_time_grid, function(y, aggdf, x) {
#   print(y)
#   #print(y)
#   #aggregate(x %>% select(y[[1]]), aggdf %>% select(y[[2]]), mean)
# }, aggdf = aggdf, x = data_nest$cropped[[1]])
# rename columns off aggregation data frame to form t(minutes) to work with select input
# data_nest$aggdf = data_nest$aggdf %>% map(`names<-`, paste0("t",time_aggregation_values))
# calculate aggregated data frame for selected parameter and time
# see if I can't pass a subsetted data frame instead of specifying the columns
aggregated_df = map2_dfr(data_nest$cropped, data_nest$subject,
.f = aggregate_parameter, aggdf, select_param, select_agg, aggregate_by(select_param))
# rename columns so all the aggregations have the same signature
colnames(aggregated_df) = c("interval", "parameter", "subject")
#plot for individuals
aggregated_df %>%
#dplyr::filter(subject %in% subject_list) %>%
ggplot(aes(x = interval, y = parameter, color = subject)) + geom_line()
?selectInput
column_specs %>% filter(!is.na(aggregate))
parameters = column_specs %>% filter(!is.na(aggregate)) %>% select(name_app)
parameters
parameters = column_specs %>% filter(!is.na(aggregate)) %>% select(name_app) %>% as.vector
parameters
names(parameters) = column_specs %>% filter(!is.na(aggregate)) %>% select(display_app) %>% as.vector
names(parameters) = column_specs %>% filter(!is.na(aggregate)) %>% select(display_app)
parameters
parameters = column_specs %>% filter(!is.na(aggregate)) %>% select(name_app) %>% as.array()
parameters = column_specs %>% filter(!is.na(aggregate)) %>% select(name_app) %>% as.array
parameters = column_specs %>% filter(!is.na(aggregate)) %>% select(name_app) %>% as.list
parameters
parameters = column_specs %>% filter(!is.na(aggregate)) %>% select(name_app) %>% as.character
parameters
parameters = column_specs %>% filter(!is.na(aggregate)) %>% select(name_app) %>% pull
parameters
names(parameters) = column_specs %>% filter(!is.na(aggregate)) %>% select(display_app) %>% pull
parameters
runApp()
parameters = parameters[-1][-1]
runApp()
runApp()
# imports ------------------------------------------------
library(shiny)
library(dplyr)
library(stringr)
library(readr)
library(xlsx)
library(ggplot2)
library(readr)
library(purrr)
library(tidyverse)
library(numbers)
library(rJava)
library(reshape2)
# options ------------------------------------------------
options(shiny.maxRequestSize = 20*1024^2)
options(java.parameters = "-Xmx2048m")
# functions -----------------------------------------------
# create_aggregation_vector = function(length, each) {
#   # vec = map_dfc(repeats, function(x) {
#   #   c(rep(NA, skip_start-1), rep(1:length, each = x, length.out = length+1))
#   # })
#   vec = c(rep(1:length, each = each, length.out = length))
#   return(vec)
# }
create_aggregation_vector = function(each, length) {
# vec = map_dfc(repeats, function(x) {
#   c(rep(NA, skip_start-1), rep(1:length, each = x, length.out = length+1))
# })
vec = c(rep(1:length, each = each, length.out = length))
return(vec)
}
aggregate_parameter = function(data, subject, aggregation, parameter = "vo2", time = "t2", by = "mean", cumulative = FALSE) {
tmp = aggregate(data %>% dplyr::select(parameter), aggregation %>% dplyr::select(time), by)
if(cumulative == TRUE) {
tmp = cbind.data.frame(tmp %>% dplyr::select(1), tmp %>% dplyr::select(-1) %>% cumsum)
}
return(cbind.data.frame(tmp, subject, stringsAsFactors = F))
}
aggregate_by = function(parameter) {
by = column_specs %>% dplyr::filter(name_app == select_param) %>% dplyr::select(aggregate) %>% as.character
return(by)
}
# constants -----------------------------------------------
#TODO verify that all intervals are the same
# will inferred from data
interval = 2
# will be selectable
select_param = "rer"
select_agg = "t360"
fasting <- "Fasting"
refeeding <- "Refeeding"
# will be selectable
subject_list = c("1001", "1002", "1003", "1004", "1005", "1003", "1016")
# load data -----------------------------------------------
setwd("E:/OneDrive/programming/clams/")
#setwd("~/OneDrive/programming/clams/")
column_specs = read_delim("clams_column_specification.txt", delim = '\t')
# -1 -1  is because temp and light is still present in this iteration
parameters = column_specs$name_app[!is.na(column_specs$aggregate)][-1][-1]
data = read_delim("2019-10-16_tse.csv", delim = ',',
col_types = "cicdiddddiiiiiiiiddc")
data$temp = NULL
data$events = NULL
colpal = c("#F8766D", "#E68613", "#CD9600", "#ABA300", "#7CAE00", "#0CB702", "#00BE67", "#00C19A", "#00BFC4", "#00B8E7", "#00A9FF", "#8494FF", "#C77CFF", "#ED68ED","#FF61CC", "#FF68A1")
# analysis ------------------------------------------------
time_aggregation_values = intersect(seq(interval, 24*60, by = interval),
c(divisors(12*60)[-1], 1440))
time_aggregation_repeats = time_aggregation_values / interval
data_nest = data %>% group_by(subject) %>% nest()
data_nest = data_nest %>%
mutate(first_night_interval = map(data, . %>% dplyr::filter(light == 0) %>% top_n(1, -interval) %>% dplyr::select(interval) %>% as.numeric),
no_records = map(data, . %>% count() %>% as.numeric),
cropped_records = map2_dbl(.x = data, .y = first_night_interval, function(x, y) {(x %>% count() %>% as.numeric) + 1 - y}))
#min records not implemented
#min_records = min(map2_dbl(data_nest$cropped_records, data_nest$first_night_interval, `-`))
min_records = min(data_nest$cropped_records)
data_nest = data_nest %>%
mutate(cropped = modify2(data, first_night_interval, function(x, y, mm) {
x %>% dplyr::filter(interval >= y & interval <= (mm + y))
}, mm = min_records))
# data_nest = data_nest %>%
#   mutate(aggdf = map2(no_records, first_night_interval, .f = create_aggregation_vector, time_aggregation_repeats))
# data_nest = data_nest %>%
#   mutate(aggdf = list(map2_dfc(cropped_records, time_aggregation_repeats, .f = create_aggregation_vector)))
aggdf = map_dfc(time_aggregation_repeats, .f = create_aggregation_vector, data_nest$cropped_records[[1]])
names(aggdf) = paste0("t",time_aggregation_values)
runApp()
parameters = column_specs %>% filter(!is.na(aggregate)) %>% select(name_app) %>% pull
names(parameters) = column_specs %>% filter(!is.na(aggregate)) %>% select(display_app) %>% pull
parameters = parameters[-1][-1]
runApp()
runApp()
runApp()
runApp()
1:1
1:2
runApp()
?numericInput
runApp()
runApp()
?rapply
runApp()
runApp()
str_group_sel <- function(lst) {
lst <- lst[lst != ""]
temp <- rapply(lapply(lst, strsplit, ","), str_trim, how = "list") %>%
lapply(unlist)
temp <- Map(function(x) {paste("^(", paste(x , collapse = "|"), ")$", sep = "")}, temp) %>%
unlist()
return(temp)
}
runApp()
runApp()
runApp()
runApp()
data_nest
data_nest$cropped[[1]]
data_nest$cropped[[1]] %>% select(vo2)
data_nest %>% select(subject, croppe) %>% unnest
data_nest %>% select(subject, cropped) %>% unnest
data_nest %>% select(subject, cropped) %>% unnest(cropped)
data_nest %>% select(subject, cropped) %>% unnest(cropped) %>% select(subject, interval, light vo2)
data_nest %>% select(subject, cropped) %>% unnest(cropped) %>% select(subject, interval, light, vo2)
tt = data_nest %>% select(subject, cropped) %>% unnest(cropped) %>% select(subject, interval, light, vo2)
tt
dcast(tt, interval + light ~ subject, value.var = "vo2")
dt = dcast(tt, interval + light ~ subject, value.var = "vo2")
rowMeans()
?rowMeans
groups = list(c("1001", "1002"), c("1001", "1002"), c("1005", "1006"))
groups
dt
map_dfc(groups, function(x) {
dt %>% select(x) %>% rowMeans
})
map_dfr(groups, function(x) {
aggregate(dt %>% select(x) %>% rowMeans, aggdf %>% select(t360), mean)
})
map_dfr(groups, function(group) {
aggregate(dt %>% select(group) %>% rowMeans, aggdf %>% select(t360), mean)
})
library(matrixStats)
install.packages("matrixStats")
library(matrixStats)
library(matrixStats)
dt
map_dfr(groups, function(x) {
tmp_agg = aggregate(dt %>% select(x), aggdf %>% select(t360), mean)
})
tmp_agg = aggregate(dt %>% select(x), aggdf %>% select(t360), mean) %>% unname
tmp_agg = aggregate(dt %>% select(x), aggdf %>% select(t360), mean) %>% unname()
map_dfr(groups, function(x) {
tmp_agg = aggregate(dt %>% select(x), aggdf %>% select(t360), mean)
})
tmp_agg = aggregate(a = dt %>% select(x), aggdf %>% select(t360), mean)
map_dfr(groups, function(x) {
tmp_agg = aggregate(dt %>% select(x), aggdf %>% select(t360), mean)
names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_agg = aggregate(dt %>% select(x), aggdf %>% select(t360), mean)
#names(tmp_agg) = c("a", "b")
})
group
groups
map_dfr(groups, function(x) {
tmp_agg = aggregate(dt, aggdf %>% select(t360), mean)
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_agg = aggregate(dt[,-c(1,2)], aggdf %>% select(t360), mean)
#names(tmp_agg) = c("a", "b")
})
df = aggregate(dt[,-c(1,2)], aggdf %>% select(t360), mean)
df
map_dfr(groups, function(x) {
tmp_mean = (df %>% select(x) %>% rowMeans)
tmp_sd = (df %>% select(x) %>% rowSds)
cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_mean = (df %>% select(x) %>% rowMeans)
#tmp_sd = (df %>% select(x) %>% rowSds)
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
df %>%  rowMeans
map_dfr(groups, function(x) {
tmp_mean = (df %>% select(x) %>% rowMeans)
#tmp_sd = (df %>% select(x) %>% rowSds)
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
df %>% select(1001, 1002) %>% rowMeans
df
df %>% select("1001", "1002") %>% rowMeans
df %>% select(c("1001", "1002")) %>% rowMeans
groups = list(c("1001", "1002"), c("1001", "1002"), c("1005", "1006"))
map_dfr(groups, function(x) {
tmp_mean = (df %>% select(x) %>% rowMeans)
#tmp_sd = (df %>% select(x) %>% rowSds)
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
#tmp_sd = (df %>% select(x) %>% rowSds)
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
tmp_mean = df %>% select(x) %>% rowMeans()
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans()
#tmp_sd = (df %>% select(x) %>% rowSds)
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans()
#tmp_sd = (df %>% select(x) %>% rowSds)
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans()
tmp_sd = (df %>% select(x) %>% rowSds)
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
?rowSds
map(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans()
tmp_sd = (df %>% select(x) as.matrix %>% rowSds)
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans()
tmp_sd = df %>% select(x) as.matrix %>% rowSds
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map(groups, function(x) {
#tmp_mean = df %>% select(x) %>% rowMeans()
tmp_sd = df %>% select(x) as.matrix %>% rowSds
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map(groups, function(x) {
#tmp_mean = df %>% select(x) %>% rowMeans()
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
#cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans()
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
cbind.data.frame(df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans()
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
cbind.data.frame(interval = df[,1], tmp_mean, tmp_sd, group = x)
#names(tmp_agg) = c("a", "b")
})
map(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
cbind.data.frame(interval = df[,1], tmp_mean, tmp_sd, group = paste0(x))
#names(tmp_agg) = c("a", "b")
})
df %>% select(groups[1])
df %>% select(groups[[1]])
df %>% select(groups[[1]]) %>% rowMeans
df %>% select(groups[[1]]) %>% rowSds
df %>% select(groups[[1]]) %>% as. matrix %>% rowSds
df %>% select(groups[[1]]) %>% as.matrix %>% rowSds
groups = list(c("1001", "1002"), c("1003", "1004"), c("1005", "1006"))
tt = data_nest %>% select(subject, cropped) %>% unnest(cropped) %>% select(subject, interval, light, vo2)
dt = dcast(tt, interval + light ~ subject, value.var = "vo2")
df = aggregate(dt[,-c(1,2)], aggdf %>% select(t360), mean)
map(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
cbind.data.frame(interval = df[,1], tmp_mean, tmp_sd, group = paste0(x))
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
cbind.data.frame(interval = df[,1], tmp_mean, tmp_sd, group = paste0(x))
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
print(x)
cbind.data.frame(interval = df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
print(paste(x, sep = "|"))
cbind.data.frame(interval = df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
paste0(groups[[1]])
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
print(paste(x, sep = "|", collapse = ''))
cbind.data.frame(interval = df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
print(paste(x, collapse = '|'))
cbind.data.frame(interval = df[,1], tmp_mean, tmp_sd)
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
grp_name = print(paste(x, collapse = '|'))
cbind.data.frame(interval = df[,1], mean = tmp_mean, sd = tmp_sd, group = grp_name)
#names(tmp_agg) = c("a", "b")
})
map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
grp_name = print(paste(x, collapse = '|'))
cbind.data.frame(interval = df[,1], mean = tmp_mean, sd = tmp_sd, group = grp_name, stringsAsFactors = F)
#names(tmp_agg) = c("a", "b")
})
fd = map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
grp_name = print(paste(x, collapse = '|'))
cbind.data.frame(interval = df[,1], mean = tmp_mean, sd = tmp_sd, group = grp_name, stringsAsFactors = F)
#names(tmp_agg) = c("a", "b")
})
fd = map_dfr(groups, function(x) {
tmp_mean = df %>% select(x) %>% rowMeans
tmp_sd = df %>% select(x) %>% as.matrix %>% rowSds
grp_name = paste(x, collapse = '|')
cbind.data.frame(interval = df[,1], mean = tmp_mean, sd = tmp_sd, group = grp_name, stringsAsFactors = F)
#names(tmp_agg) = c("a", "b")
})
View(fd)
group_aggregate_paramter = function(data, aggregation, parameter = "vo2", time = "t360", by = mean, cumulative = FALSE) {
tmp = data_nest %>% select(subject, data$cropped) %>% unnest(cropped) %>% select(subject, interval, light, parameter)
cast_tmp = dcast(tmp, interval + light ~ subject, value.var = parameter)
agg_tmp = aggregate(cast_tmp[,-c(1,2)], aggregation %>% select(time), by)
return(agg_tmp)
}
group_means = function(aggregated_df, groups) {
group_tmp = map_dfr(groups, function(x) {
tmp_mean = aggregated_df %>% select(x) %>% rowMeans
tmp_sd = aggregated_df %>% select(x) %>% as.matrix %>% rowSds
grp_name = paste(x, collapse = '|')
cbind.data.frame(interval = aggregated_df[,1], mean = tmp_mean, sd = tmp_sd, group = grp_name, stringsAsFactors = F)
})
}
test = "1001, 1002, 1003"
str_split(test, ",")
str_split(test, ",") %>% trim
str_split(test, ",") %>% str_trim
?strsplit
?str_split
str_split(test, ",")
str_split(test, ",", simplify = T)
group_list
str_split(test, ",")
vapply(str_split(test, ","), str_trim, character(1))
map_chr(str_split(test, ","), str_trim)
temp <- rapply(lapply(test, strsplit, ","), str_trim, how = "list") %>%
lapply(unlist)
temp
test
runApp()
runApp()
runApp()
runApp()
group_aggregate_paramter = function(data, aggregation, parameter = "vo2", time = "t360", by = mean, cumulative = FALSE) {
tmp = data %>% select(subject, cropped) %>% unnest(cropped) %>% select(subject, interval, light, parameter)
cast_tmp = dcast(tmp, interval + light ~ subject, value.var = parameter)
agg_tmp = aggregate(cast_tmp[,-c(1,2)], aggregation %>% select(time), by)
return(agg_tmp)
}
runApp()
runApp()
