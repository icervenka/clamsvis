runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
?pivot_wider
runApp('OneDrive/programming/clams')
getwd()
setwd("~/OneDrive/programming/clams/")
file <- read_delim("2019-11-19_tse.csv", delim = ',',col_types = "ciciddddiiiiiiiidd")
data = file
subject_list = unique(data$subject)
parameters = column_specs %>% dplyr::filter(parameter == 1) %>% select(name_app) %>% pull
names(parameters) = column_specs %>% filter(parameter == 1) %>% select(display_app) %>% pull
interval = find_interval(data, subject, date_time, interval)
#interval = 2
if(length(interval) != 1) {
stop("One of subject time series is not regular. Please update your data and try again")
} else {
interval = as.numeric(interval)
}
rv_data$interval = interval
time_aggregation_values = intersect(seq(interval, 24*60, by = interval),
c(divisors(12*60)[-1], 1440))
time_aggregation_repeats = time_aggregation_values / interval
data_subject = data %>% dplyr::group_by(subject) %>% nest()
data_subject = data_subject %>%
mutate(first_night_interval = map(data, . %>% dplyr::filter(light == 0) %>% top_n(1, -interval) %>% dplyr::select(interval) %>% as.numeric),
no_records = map(data, . %>% dplyr::count() %>% as.numeric),
cropped_records = map2_dbl(.x = data, .y = first_night_interval, function(x, y) {(x %>% dplyr::count() %>% as.numeric) + 1 - y}))
min_records = min(data_subject$cropped_records)
data_subject = data_subject %>%
mutate(cropped = modify2(data, first_night_interval, function(x, y, mm) {
x %>% dplyr::filter(interval >= y & interval <= (mm + y))
}, mm = min_records))
aggdf = map_dfc(time_aggregation_repeats, .f = create_aggregation_vector, data_subject$cropped_records[[1]])
names(aggdf) = paste0("t",time_aggregation_values)
data_long = data_subject %>% select(subject, cropped) %>% unnest(cropped)
data_agg = cbind.data.frame(data_long, aggdf)
find_interval = function(df, group_col, date_time_col, id_col) {
date_time_df = df %>% pivot_wider(names_from = {{group_col}}, values_from = {{date_time_col}}, id_cols = {{id_col}})
interval = map_dfr(date_time_df[-1], function(x) {diff(x %>% as_datetime) %>% as.integer}) %>%
pivot_longer(everything(), names_to = "subject", values_to = "interval") %>%
dplyr::select(interval) %>%
unique %>%
pull
return(interval)
}
create_aggregation_vector = function(each, length) {
vec = c(rep(1:length, each = each, length.out = length))
return(vec)
}
aggregate_parameter = function(data, time, param) {
func = aggregate_by(param)
data = setDT(data)[,.(light = data.table::first(light),
date_time = data.table::first(date_time),
mean = func(get(param)),
param = param),
by = .(subject, interval = get(time))]
data[,period := cumsum(c(1,diff(light)!=0)), by = subject]
return(data)
}
parse_group_inputs = function(inp) {
no_groups = 1
if(!is.null(inp$select_no_groups)) {
no_groups = inp$select_no_groups
}
group_list = lapply(1:as.integer(no_groups), function(x) {
inp[[paste0("group_no_", x)]]
})
group_list[sapply(group_list, is.null)] <- list("")
group_list <- group_list[group_list != ""]
group_list <- rapply(lapply(group_list, strsplit, ","), str_trim, how = "list") %>%
lapply(unlist)
if(length(group_list) > 0) {
group_df = map_dfr(1:length(group_list), function(x) {
cbind.data.frame(subject = group_list[[x]], group =  paste0("Group", x), stringsAsFactors = FALSE)
})
} else {
group_df = data.frame()
}
return(group_df)
}
data = file
subject_list = unique(data$subject)
parameters = column_specs %>% dplyr::filter(parameter == 1) %>% select(name_app) %>% pull
names(parameters) = column_specs %>% filter(parameter == 1) %>% select(display_app) %>% pull
interval = find_interval(data, subject, date_time, interval)
#interval = 2
if(length(interval) != 1) {
stop("One of subject time series is not regular. Please update your data and try again")
} else {
interval = as.numeric(interval)
}
rv_data$interval = interval
time_aggregation_values = intersect(seq(interval, 24*60, by = interval),
c(divisors(12*60)[-1], 1440))
time_aggregation_repeats = time_aggregation_values / interval
data_subject = data %>% dplyr::group_by(subject) %>% nest()
data_subject = data_subject %>%
mutate(first_night_interval = map(data, . %>% dplyr::filter(light == 0) %>% top_n(1, -interval) %>% dplyr::select(interval) %>% as.numeric),
no_records = map(data, . %>% dplyr::count() %>% as.numeric),
cropped_records = map2_dbl(.x = data, .y = first_night_interval, function(x, y) {(x %>% dplyr::count() %>% as.numeric) + 1 - y}))
min_records = min(data_subject$cropped_records)
data_subject = data_subject %>%
mutate(cropped = modify2(data, first_night_interval, function(x, y, mm) {
x %>% dplyr::filter(interval >= y & interval <= (mm + y))
}, mm = min_records))
aggdf = map_dfc(time_aggregation_repeats, .f = create_aggregation_vector, data_subject$cropped_records[[1]])
names(aggdf) = paste0("t",time_aggregation_values)
data_long = data_subject %>% select(subject, cropped) %>% unnest(cropped)
data_agg = cbind.data.frame(data_long, aggdf)
data_agg
aggregated_df = map_dfr(rv_data$parameters,
~ aggregate_parameter(data_agg,
paste0("t", "60"),
.x))
aggregated_df = map_dfr(parameters,
~ aggregate_parameter(data_agg,
paste0("t", "60"),
.x))
parameters = column_specs %>% dplyr::filter(parameter == 1) %>% select(name_app) %>% pull
aggregate_with_specs = function(specs) {
function(select_param) {
by = specs %>% dplyr::filter(name_app == select_param) %>% dplyr::select(aggregate) %>% as.character
return(get(by))
}
}
# constants ------------------------------------------------
column_specs = suppressMessages(read_delim("clams_column_specification.txt", delim = '\t'))
aggregate_by = aggregate_with_specs(column_specs)
parameters = column_specs %>% dplyr::filter(parameter == 1) %>% select(name_app) %>% pull
names(parameters) = column_specs %>% filter(parameter == 1) %>% select(display_app) %>% pull
aggregated_df = aggregated_df %>% pivot_wider(id_cols = c(subject, interval, light), names_from = param)
aggregated_df = map_dfr(parameters,
~ aggregate_parameter(data_agg,
paste0("t", "60"),
.x))
aggregated_df
aggregated_df = aggregated_df %>% pivot_wider(id_cols = c(subject, interval, light), names_from = param)
aggregated_df = aggregated_df %>% pivot_wider(id_cols = c(subject, interval, light), names_from = param, values_from = mean)
aggregated_df
aggregated_df %>%
ggplot(aes(x = vo2, y = vco2)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35) +
#plot_points(input$display_points) +
#plot_facets(length(rv_filters$parameters))
ggplotly(p, tooltip = c("subject", "y")) %>%
layout(hovermode = "x",
showlegend = F,
autosize = T)
aggregated_df %>%
ggplot(aes(x = vo2, y = vco2)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001", "1002"))
aggregated_df %>%
filter(subject %in% c("1001", "1002")) %>%
ggplot(aes(x = vo2, y = vco2)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df = map_dfr(parameters,
~ aggregate_parameter(data_agg,
paste0("t", "360"),
.x))
aggregated_df = aggregated_df %>% pivot_wider(id_cols = c(subject, interval, light), names_from = param, values_from = mean)
print(aggregated_df)
aggregated_df %>%
filter(subject %in% c("1001", "1002")) %>%
ggplot(aes(x = vo2, y = vco2)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001", "1002", "1003")) %>%
ggplot(aes(x = vo2, y = vco2)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001", "1002", "1003")) %>%
ggplot(aes(x = rer, y = xyt)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001")) %>%
ggplot(aes(x = rer, y = xyt)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001")) %>%
ggplot(aes(x = heat, y = xyt)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df = map_dfr(parameters,
~ aggregate_parameter(data_agg,
paste0("t", "60"),
.x))
aggregated_df = aggregated_df %>% pivot_wider(id_cols = c(subject, interval, light), names_from = param, values_from = mean)
print(aggregated_df)
aggregated_df %>%
filter(subject %in% c("1001")) %>%
ggplot(aes(x = heat, y = xyt)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001")) %>%
ggplot(aes(x = rer, y = xyt)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001")) %>%
ggplot(aes(x = feed, y = xyt)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001")) %>%
ggplot(aes(x = feed, y = xyt)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001")) %>%
ggplot(aes(x = xyt, y = feed)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 0.35)
aggregated_df %>%
filter(subject %in% c("1001")) %>%
ggplot(aes(x = xyt, y = feed)) +
# geom_tile(data = NULL,
#           aes(x = interval, y = 0 , width = 1, height = Inf*(!light)*first_subject),
#           fill = "grey30", alpha = 0.2, inherit.aes = F) +
geom_point(aes(color = subject), size = 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?scale_size
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
titlePanel("CLAMS-VIS"),
tags$style(type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
sidebarLayout(
sidebarPanel(
"",
uiOutput("file_input"),
conditionalPanel(
condition = "input.tabs1 != 'Download'",
tags$hr(),
uiOutput("textbox_ui"),
fluidRow(
column(
align = 'right',
actionButton("add_btn", "Add"),
width = 2
),
column(
align = 'right',
actionButton("rm_btn", "Remove "),
width = 2
)
),
tags$hr(),
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Series' |
input.tabs1 == 'Individual - Hour' |
input.tabs1 == 'Individual - Scatter'",
uiOutput("select_subjects")
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Series' |
input.tabs1 == 'Grouped - Series' |
input.tabs1 == 'Individual - Summary' |
input.tabs1 == 'Grouped - Summary' |
input.tabs1 == 'Individual - Scatter'",
uiOutput("select_aggregation")
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Scatter'",
uiOutput("scatter_x"),
uiOutput("scatter_y"),
uiOutput("scatter_size")
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Series' |
input.tabs1 == 'Grouped - Series'",
uiOutput("display_interval")
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Bout' |
input.tabs1 == 'Grouped - Bout'",
uiOutput("bout_aggregation"),
uiOutput("bout_mincount"),
uiOutput('bout_update'),
tags$hr(),
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Summary' |
input.tabs1 == 'Grouped - Summary' |
input.tabs1 == 'Individual - Hour' | ' |
input.tabs1 == 'Grouped - Summary'
input.tabs1 == 'Individual - Scatter'",
uiOutput("select_dark"),
uiOutput("select_light")
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Hour' |
input.tabs1 == 'Grouped - Hour'",
uiOutput("shift_zt")
),
conditionalPanel(
condition = "input.tabs1 == 'Grouped - Series' |
input.tabs1 == 'Grouped - Summary' |
input.tabs1 == 'Grouped - Hour' |
input.tabs1 == 'Grouped - Bout'",
uiOutput('select_no_groups'),
uiOutput('display_groups')
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Series' |
input.tabs1 == 'Grouped - Series'",
uiOutput("select_cumulative")
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Series' |
input.tabs1 == 'Grouped - Series' |
input.tabs1 == 'Individual - Bout' |
input.tabs1 == 'Grouped - Bout' |
input.tabs1 == 'Individual - Hour' |
input.tabs1 == 'Grouped - Hour'",
uiOutput("display_points")
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Hour' |
input.tabs1 == 'Grouped - Series' |
input.tabs1 == 'Grouped - Hour'",
uiOutput("display_errorbars"),
# uiOutput("display_statistics")
),
conditionalPanel(
condition = "input.tabs1 == 'Individual - Summary' |
input.tabs1 == 'Grouped - Summary'",
uiOutput("download_view")
),
conditionalPanel(
condition = "input.tabs1 != 'Download'",
tags$hr(),
uiOutput("plot_width"),
uiOutput("plot_height")
),
conditionalPanel(
condition = "input.tabs1 == 'Download'",
p("Due to the rather computationally intensive calculations of all possible aggregations and their subsequent export xlsx format,
it is currently only possible to select 5 aggregation intervals."),
h4("The request take several seconds to process after clicking the download button")
),
width = 2
),
mainPanel(
"",
tabsetPanel(
id = "tabs1",
type = "pills",
tabPanel("Individual - Series",
uiOutput("individual_series_plot_render")),
tabPanel("Individual - Summary",
uiOutput("individual_summary_plot_render")),
tabPanel("Individual - Scatter",
uiOutput("individual_scatter_plot_render")),
tabPanel("Individual - Bout",
uiOutput("individual_bout_plot_render")),
tabPanel("Individual - Hour",
uiOutput("individual_hour_plot_render")),
tabPanel("Grouped - Series",
uiOutput("grouped_series_plot_render")),
tabPanel("Grouped - Summary",
uiOutput("grouped_summary_plot_render")),
tabPanel("Grouped - Scatter",
uiOutput("grouped_scatter_plot_render")),
tabPanel("Grouped - Bout",
uiOutput("grouped_bout_plot_render")),
tabPanel("Grouped - Hour",
uiOutput("grouped_hour_plot_render")),
tabPanel("Download",
uiOutput("download"))
),
width = 10
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
