column
columns <- c("c1", "c2", "c3", "c4")
data.frame(mean = rowMeans(select(dfz, columns))
)
data.frame(mean = rowMeans(select(dfz, c("c1", "c2", "c4")))
)
data.frame(mean = rowMeans(select(dfz, columns
)
)
)
)
))
data.frame(mean = rowMeans(select(dfz, columns)))
data.frame(mean = rowMeans(select(dfz, matches("^(c1|c2)_"))))
data.frame(mean = rowMeans(select(dfz, matches("c1"))))
data.frame(mean = rowMeans(select(dfz, matches(columns))))
data.frame(mean = rowMeans(select(dfz, matches("columns"))))
data.frame(mean = rowMeans(select(dfz, matches("c1|c2|c3|c4"))))
select(dfz, matches("c1|c2|c3|c4")))
select(dfz, matches("c1|c2|c3|c4"))
select(dfz, matches(columns))
select(dfz, matches(^"c1|c2|c3|c4"))
select(dfz, matches("^c1|c2|c3|c4"))
select(dfz, matches("^c1|c2|c3|c4_"))
select(dfz, matches("^(c1|c2|c3|c4)_"))
select(dfz, matches("^(c1|c2|c3|c4)$"))
paste(columns, sep"|")
paste(columns, sep="|")
paste(columns, collapse="|")
str <- paste(columns, collapse="|")
paste("^", str, "$")
paste("^", str, "$", collapse="")
paste("^", str, "$", sep = "")
str_group_sel <- function(list) {
return (paste("^", paste(as.character(list), collapse = "|"), "$"))
}
str_group_sel(column)
str_group_sel(columns)
str_group_sel <- function(list) {
return (paste("^", paste(as.character(list), collapse = "|"), "$", sep = ""))
}
str_group_sel(columns)
select(dfz, matches(str_group_sel(columns))
)
data.frame(mean = rowMeans(select(dfz, matches(str_group_sel(columns)))))
columns1 <- c("c1", "c2", "c3", "c4")
columns2 <- c("l1", "l2", "l3", "l4")
str_group_sel <- function(list) {
return (paste("^", paste(as.character(list), collapse = "|"), "$", sep = ""))
}
df1 <- data.frame(mean = rowMeans(select(dfz, matches(str_group_sel(columns1)))))
df2 <- data.frame(mean = rowMeans(select(dfz, matches(str_group_sel(columns2)))))
View(dfz)
View(df1)
df2
merge(df1, df2)
merge(df1, df2, all =)
merge(df1, df2, all.x = all)
merge(df1, df2, all.x = TRUE)
df2 <- data.frame(mean2 = rowMeans(select(dfz, matches(str_group_sel(columns2)))))
df1 <- data.frame(mean1 = rowMeans(select(dfz, matches(str_group_sel(columns1)))))
merge(df1, df2)
cbind(df1, df2)
df3 <- data.frame(mean3 = rowMeans(select(dfz, matches(str_group_sel(columns1)))))
cbind(df1, df2, df3)
columns <- c(columns1, columns2)
columns <- rbind(columns1, columns2)
columns
columns[columns1]
columns[columns1,]
columns[,columns1]
columns["columns1"]
columns["columns1",]
columns[1,]
columns <- matrix(columns1, columns2)
columns <- rbind(columns1, columns2)
lapply(1:2, function(x) {data.frame(mean = rowMeans(select(dfz, matches(str_group_sel(x)))))})
lapply(1:2, function(x) {data.frame(mean = rowMeans(select(dfz, matches(str_group_sel(columns[x, 1])))))})
lapply(1:2, function(x) {data.frame(rowMeans(select(dfz, matches(str_group_sel(columns[x, 1])))))})
cbind(lapply(1:2, function(x) {data.frame(rowMeans(select(dfz, matches(str_group_sel(columns[x, 1])))))}))
rowCount
row_number()
row_number()
dim(columns)
dim(columns)[1]
cbind(lapply(1:dim(columns)[1], function(x) {data.frame(rowMeans(select(dfz, matches(str_group_sel(columns[x, 1])))))}))
lapply(1:dim(columns)[1], function(x) {data.frame(rowMeans(select(dfz, matches(str_group_sel(columns[x, 1])))))})
sapply(1:dim(columns)[1], function(x) {data.frame(rowMeans(select(dfz, matches(str_group_sel(columns[x, 1])))))})
df <- do.call(cbind, lapply(1:dim(columns)[1], function(x) {data.frame(rowMeans(select(dfz, matches(str_group_sel(columns[x, 1])))))}))
df
names(df) <- columns
names(df)
length((names(df)))
names(df) <- columns[1,]
names(df) <- columns[,1]
names(df) <- columns[,1]
df
names(df) <- str_group_sel(columns)
df
names(df) <- paste(as.character(columns), collapse = "")
names(df) <- paste(as.character(columns[,1]), collapse = "")
names(df) <- paste(as.character(columns[1,]), collapse = "")
names(df) <- paste(as.character(lapply(columns, '[')), collapse = "")
names(df) <- paste(as.character(lapply(columns, '[', i=, j=1)), collapse = "")
names(df) <- paste(as.character(lapply(columns, '[', i=1, j=1)), collapse = "")
names(df) <- paste(as.character(lapply(columns, '[', i=1)), collapse = "")
names(df) <- paste(as.character(lapply(columns, '[', j=1)), collapse = "")
lapply(columns, '[', j=1)
lapply(columns, '[', i=, j=1)
dim(columns)
lapply(columns, '[', 1, 1)
lapply(columns, '[', 1)
lapply(columns, '[', ,1)
lapply(columns, '[')
columns[,1]
columns[1,]
?apply
apply(columns, 1, function (x {paste(as.character(x), collapse = "")}))
apply(columns, 1, function (x) {paste(as.character(x), collapse = "")}))
apply(columns, 1, function (x) {paste(as.character(x), collapse = "")})
names(df) <- apply(columns, 1, function (x) {paste(as.character(x), collapse = "")})
names(df) <- apply(columns, 1, function (x) {paste(as.character(x), collapse = " ")})
names(df) <- apply(columns, 1, function (x) {paste(as.character(x), collapse = "")})
df <- do.call(cbind, lapply(1:dim(columns)[1], function(x) {data.frame(rowMeans(select(dfz, matches(str_group_sel(columns[x, 1])))))}))
names(df) <- apply(columns, 1, function (x) {paste(as.character(x), collapse = "")})
df
runApp('Google Drive/programming/clams/clams_shiny/clams')
library(rsconnect)
rsconnect::setAccountInfo(name='icervenka', token='83691CB94CACF80D18CBB691C6980688', secret='AOOFvmzfHSQjuhptOHFQOQFveKcx7QiMWbJe+FaR')
deployApp()
?deployApp
deployApp("/Users/igor/Google Drive/programming/clams_app/")
install.packages("shiny")
install.packages("readxl")
install.packages(c("DBI", "digest", "mgcv", "Rcpp", "RcppArmadillo"))
deployApp("/Users/igor/Google Drive/programming/clams_app/")
library(rsconnect)
deployApp("/Users/igor/Google Drive/programming/clams_app/")
deployApp("/Users/igor/Google Drive/programming/clams_app/")
deployApp("/Users/igor/Google Drive/programming/clams_app/")
shiny::runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams/clams_shiny/clams')
runApp('Google Drive/programming/clams_app')
deployApp("/Users/igor/Google Drive/programming/clams_app/")
runApp('Google Drive/programming/clams_app')
deployApp("/Users/igor/Google Drive/programming/clams_app/")
runApp('Google Drive/programming/clams_app')
deployApp("/Users/igor/Google Drive/programming/clams_app/")
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams/clams_shiny/clams')
runApp('Google Drive/programming/clams_app')
pack <- c("zoo", "ggplot2", "rPython", "chron", "xlsx", "dplyr", "shiny", "reshape2")
lapply(pack, require, character.only = TRUE)
nameParameterMap <- as.data.frame(matrix( data = c(
c("X_Ambulatory", "X ambulatory movement"),
c("Volume_CO2", "CO2 volume"),
c("Z_Total", "Z total movement"),
c("RER", "Resting energy rate"),
c("Feed_Weight_1", "Food weight"),
c("Y_Total", "Y total movement"),
c("Y_Ambulatory", "Y ambulatory movement"),
c("Feed_Acc._1", "Food weight accumulation"),
c("X_Total", "X total movement"),
c("Heat", "Heat"),
c("Volume_O2", "O2 volume"),
c("Drink_Weight_1", "Drink volume"),
c("Drink_Acc._1", "Drink volume accumulation"),
c("XY_dist", "XY ambulatory movement")), ncol = 2, byrow = TRUE
), stringsAsFactors = FALSE)
colnames(nameParameterMap) = c("parameter", "name")
fasting <- "Fasting"
refeeding <- "Refeeding"
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# ************************************************
# function declaration
# ************************************************
#gen_time_group <- function(x, crop, len) {return(rep(1:((len-crop)/x), each=x))}
#gen_agg_group <- function(x, crop, len) {return(seq(1, (len-crop), x))}
paste0_array_text <- function(array, text) {
return(paste0(com_fact, text))
}
str_group_sel <- function(list) {
return (paste("^(", paste(as.character(list), collapse = "|"), ")$", sep = ""))
}
gen_seq_time_init <-function(start_pos, time_seq) {
return(rep(time_seq[1], (start_pos-1)))
}
gen_seq_time_end <- function(start_pos, interval, time_seq,  records_count) {
return(as.POSIXct(unlist(lapply(0:(records_count/interval), function (x) {rep(time_seq[start_pos+(interval*x)], each = interval)})), origin="1970-01-01 00:00:00")[1:(records_count - (start_pos-1))])
}
gen_agg_parameter <- function(data, init_crop,  intervals, len) {
agg = list()
time_data <- time(data)
for(i in seq_along(init_crop)) {
seq1 <- gen_seq_time_init(init_crop[i], time_data)
seq2 <- gen_seq_time_end(init_crop[i], intervals[i], time_data, records_count)
agg[[i]] <- aggregate(data, c(seq1, seq2), mean)
}
return(agg)
}
gen_hour_agg <- function(data, fasting_index, initial_start) {
return(as.data.frame(t(sapply(0:23, function(x) {colMeans(filter(data, hour == x, row_number() < fasting_index & row_number() >= initial_start))}))))
}
arrange.vars <- function(data, vars){
##stop if not a data.frame (but should work for matrices as well)
stopifnot(is.data.frame(data))
##sort out inputs
data.nms <- names(data)
var.nr <- length(data.nms)
var.nms <- names(vars)
var.pos <- vars
##sanity checks
stopifnot( !any(duplicated(var.nms)),
!any(duplicated(var.pos)) )
stopifnot( is.character(var.nms),
is.numeric(var.pos) )
stopifnot( all(var.nms %in% data.nms) )
stopifnot( all(var.pos > 0),
all(var.pos <= var.nr) )
##prepare output
out.vec <- character(var.nr)
out.vec[var.pos] <- var.nms
out.vec[-var.pos] <- data.nms[ !(data.nms %in% var.nms) ]
stopifnot( length(out.vec)==var.nr )
##re-arrange vars by position
data <- data[ , out.vec]
return(data)
}
# ************************************************
# load data from python script
# ************************************************
python.load("cclams.py")
experiment <- python.get("ex")
dat <- python.get("transpose_data")
time <- python.get("transpose_descriptor")
# ************************************************
# transform data
# ************************************************
# find a way how to incorporate order from user
subject_order <- c("c1"=1, "c2"=2, "c3"=3, "c4"=4, "l1"=5, "l2"=6, "l3"=7, "l4"=8)
exp_column_offset <- length(subject_order) + 2
time$`Date/Time` <- as.POSIXct(time$`Date/Time`)
time$hours <- as.numeric(format(time$`Date/Time`, "%H"))
fasting_index <- grep(fasting, time$Event_Log)
refeeding_index <- grep(refeeding, time$Event_Log)
dat_frame <- lapply(dat, data.frame)
dat_frame$XY_dist <- data.frame(sqrt((dat_frame$X_Ambulatory ** 2) + (dat_frame$Y_Ambulatory **2)))
#dat_frame <- lapply(dat_frame, arrange.vars, vars=subject_order)
dat_zoo <- lapply(dat_frame, zoo, order.by=time$`Date/Time`)
dat_hour <- lapply(dat_frame, cbind.data.frame, hour = time$hour)
# ************************************************
# calculate transformation parameters
# ************************************************
records_count <- experiment$records_count
com_fact <- experiment$factors$common
intervals <- com_fact*60/20
init <- experiment$initial[[2]]
init_crop <- (init %% intervals) + 1
end <- experiment$end[[2]]
end_crop <- end %% intervals
# ************************************************
# generate results
# ************************************************
results <- lapply(dat_zoo, gen_agg_parameter, init_crop = init_crop, intervals = intervals, len = records_count)
dat_hour_mean <- lapply(dat_hour, gen_hour_agg, fasting_index, initial_start = 1)
# ************************************************
# shiny server
# ************************************************
# Define server logic
shinyServer(function(input, output) {
output$groupChar <- renderUI({
lapply(1:as.integer(input$no_groups), function(i) {
#textInput(paste("group", i), paste(c("Group ", i, " samples: "), collapse = ''), "Comma separated sample list")
isolate(textInput(paste0("n_input_", i), label = paste0("Group: ", i), value = input[[paste0("n_input_", as.character(i))]]))
})
})
output$table <- renderText({
})
group_values <- reactiveValues()
#group_values[["1"]] <- "c1"
#group_values[["2"]] <- "c2"
observe({
input$no_groups
})
output$download <- downloadHandler(
filename = function() {
paste0(format(Sys.time(), "%Y-%m-%d_%H-%M-%S"), "_clams", ".xlsx")
},
content = function(file){
clams_wb <- createWorkbook()
for (i in seq_along(names(dat_frame))) {
sheet <- createSheet(clams_wb, sheetName = names(dat_frame)[i])
for(j in seq_along(results[[i]])) {
addDataFrame(results[[i]][[j]], sheet, startRow = 2, startCol = (exp_column_offset*j - (exp_column_offset-1)))
}
row <- createRow(sheet = sheet, rowIndex = 1)
vec <- (exp_column_offset*c(1:length(com_fact)) - (exp_column_offset-1))
cells <- createCell(row, colIndex=vec)
mapply(setCellValue, cells, paste0_array_text(com_fact, " hour aggregation"))
}
saveWorkbook(clams_wb, file)
}
)
output$timePlot <- renderPlot({
ggplot(aes(x = Index, y = Value, group = Series, colour=Series),
data = fortify(results[[which(nameParameterMap$name == input$parameterSelect)]][[match(as.numeric(input$timeAggregation), com_fact)]], melt = TRUE)) +
geom_line(size=1.05) + xlab("") + ylab("") +  scale_color_manual(values=cbPalette) +
theme(legend.text=element_text(size=16), legend.key.size = unit(0.7, "cm"), axis.text = element_text(size = 12))
}, height = 650)
output$hourPlot <- renderPlot({
ggplot(melt(dat_hour_mean[[which(nameParameterMap$name == input$parameterSelect)]], id = "hour"), aes(x = hour, y = value, color = variable)) + xlab("Hour") + ylab("") +
geom_line(size=1.05) + scale_color_manual(values=cbPalette) + theme(legend.text=element_text(size=16), legend.key.size = unit(0.7, "cm"), axis.text = element_text(size = 12),
axis.title.x = element_text(size = 16))
}, height = 650)
output$meanPlot <- renderPlot({
num <- as.integer(input$no_groups)
columns_temp <- lapply(1:num, function(x) {sapply(input[[paste0("n_input_", x)]], function (y) {sapply(strsplit(y, split = ","), str_trim)})})
columns <- sapply(columns_temp, str_group_sel)
temp_df <- data.frame(results[[which(nameParameterMap$name == input$parameterSelect)]][[match(as.numeric(input$timeAggregation), com_fact)]])
group_count = sum(sapply(1:length(columns), function(x) {dim(select(temp_df, matches(columns[x])))[2]}))
names <- lapply(1:length(columns), function (x) {names(select(temp_df, matches(columns[x])))})
if(group_count > 0) {
df <-
do.call(cbind, lapply(1:length(columns), function(x) {
data.frame(rowMeans(select(data.frame(temp_df), matches(unlist(columns[x]))
)))
}))
names <- lapply(1:length(columns), function (x) {names(select(temp_df, matches(columns[x])))})
for(i in 1:length(names)) {
names(df)[i] <- paste(names[[i]], collapse='-')
}
ggplot(aes(x = Index, y = Value, group = Series, colour=Series),
data = fortify(zoo(df), melt = TRUE)) +
geom_line(size=1.05) + xlab("") + ylab("") +  scale_color_manual(values=cbPalette) +
theme(legend.text=element_text(size=16), legend.key.size = unit(0.7, "cm"), legend.position = "bottom", axis.text = element_text(size = 12))
} else {
ggplot(aes(x = Index, y = Value, group = Series, colour=Series),
data = fortify(results[[which(nameParameterMap$name == input$parameterSelect)]][[match(as.numeric(input$timeAggregation), com_fact)]], melt = TRUE)) +
geom_blank()
}
}, height = 650)
})
subjects
runApp('Google Drive/programming/clams_app')
deployApp("/Users/igor/Google Drive/programming/clams_app/")
runApp('Google Drive/programming/clams_app')
shiny::runApp('Google Drive/programming/clams_app')
?partial
??partial
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/free_wheel_running')
runApp('Google Drive/programming/free_wheel_running')
runApp('Google Drive/programming/clams_app')
?aligned_time_series
??aligned_time_series
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/clams_app')
runApp('Google Drive/programming/fwr')
add_to_char_vector_2 <- function(vec, ...) {
for(i in seq_along(...)) {
index <- which(vec == "")[1]
stopifnot(index <= length(vec))
vec[index] <- item
}
# index <- which(vec == "")[1]
# stopifnot(index <= length(vec))
# vec[index] <- item
return(vec)
}
expDetails <- vector("character", 50)
expDetails <- add_to_char_vector_2(expDetails, "1", "2")
add_to_char_vector_2 <- function(vec, ...) {
for(i in seq_along(c(...))) {
index <- which(vec == "")[1]
stopifnot(index <= length(vec))
vec[index] <- item
}
# index <- which(vec == "")[1]
# stopifnot(index <= length(vec))
# vec[index] <- item
return(vec)
}
expDetails <- add_to_char_vector_2(expDetails, "1", "2")
add_to_char_vector_2 <- function(vec, ...) {
arguments <- c(...)
for(i in seq_along(arguments)) {
index <- which(vec == "")[1]
stopifnot(index <= length(vec))
vec[index] <- arguments[i]
}
# index <- which(vec == "")[1]
# stopifnot(index <= length(vec))
# vec[index] <- item
return(vec)
}
expDetails <- add_to_char_vector_2(expDetails, "1", "2")
runApp('Google Drive/programming/fwr')
shiny::runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
?lapply
?mapply
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
?vapply
runApp('Google Drive/programming/clams')
?mapply
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
runApp('Google Drive/programming/clams')
library(rsconnect)
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
shiny::runApp('Google Drive/programming/fwr')
chron("08/22/16 18:00:00")
chron("08/22/16", "18:00:00")
dt1 <- 'chron("08/22/16", "18:00:00")
dt1 <- chron("08/22/16", "18:00:00")
dt2 <- chron("08/24/16", "12:15:00")
seq(dt1, dt2)
seq(dt1, dt2, length = 5)
?seq.dates
seq(dt1, dt2, length.  = 5)
seq.dates(dt1, dt2, length.  = 5)
seq.dates(dt1, dt2, by = "days", length.  = 5)
seq.dates(dt1, dt2, by = "days", length  = 5)
seq.dates(dt1, dt2, by = "days")
dt2 <- chron("08/29/16", "12:15:00")
seq.dates(dt1, dt2, by = "days")
seq.dates(dt1, dt2, by = 10)
seq.dates(dt1, dt2, by = seconds(10))
seq.dates(dt1, dt2, by = 1)
seq.dates(dt1, dt2)
seq.dates(dt1, dt2, length)
seq.dates(dt1, dt2, by = 0.01, length)
seq.dates(dt1, dt2, by = 0.01, length = 5)
seq.dates(dt1, dt2, by = 0.01, length.  = 5)
seq.dates(dt1, dt2, by = 0.01, length.  = 1)
seq.dates(dt1, dt2, by = 0.01, length.  = 19)
seq.dates(dt1, dt2, by = 0.1, length.  = 19)
seq.dates(dt1, dt2, by = 0.05, length.  = 19)
seq.dates(dt1, dt2, by = 0.1, length.  = 19)
seq.dates(dt1, dt2, by = 1, length.  = 19)
seq.dates(dt1, dt2, by = 0.9, length.  = 19)
seq.dates(dt1, dt2, by = 0.1, length.  = 19)
seq.dates(dt1, dt2, by = 0.0104, length.  = 19)
seq.dates(dt1, dt2, by = 0,01041666666667, length.  = 19)
seq.dates(dt1, dt2, by = 0.01041666666667, length.  = 19)
seq.dates(dt1, dt2, by = 0.01041666, length.  = 19)
seq.dates(dt1, dt2, by = 0,01041666666667, length.out  = 19)
seq.dates(dt1, dt2, by = 0,01041666666667, length.out  = 50)
seq.dates(dt1, dt2, by = 0,01041666666667, length.out  = 652)
seq.dates(dt1, dt2, by = 0,01041666666667, length.out  = 650)
seq.dates(dt1, dt2, by = 0,01041666666667, length  = 650)
seq.dates(dt1, dt2, by = 0.01041666666667, length  = 650)
seq.dates(dt1, dt2, by = 0.01041666666667, length.out  = 15)
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
seq(dt1, dt2, by = 1440/15)
dt2
seq(dt1, dt2, by = 0.011)
seq(dt1, dt2, by = (1440/15))
runApp('Google Drive/programming/fwr')
tm_int = 1440/time_interval_min
tm_int = 1440/15
tm_int
runApp('Google Drive/programming/fwr')
dt2 - dt1
chron(dt2 - dt1)
chron(dt2 - chron(dt2-dt1))
dt1
chron(dt2 - dt1) / 0.01
chron(dt2 - dt1)
(dt2 - dt1) /0.01
(dt2 - dt1) * 0.1
(dt2 - dt1) * 0.01
minutes((dt2 - dt1))
dt2-dt1
(dt2-dt1) * 24
as.integer(dt2-dt1) * 24
as.integer(dt2-dt1)
as.double(dt2-dt1)
as.double(dt2-dt1) * 24
dt1 + 1
dt1
dt1 + 0.3
dt3 <- dt1 + 0.3
(dt3-dt1)
as.double(dt3-dt1)
shiny::runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/clams')
