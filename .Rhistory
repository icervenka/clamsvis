installed.packages()
as.data.frame(installed.packages()[,c(1,3:4)])
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
install.packages("dplyr")
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
ip
lib_loc <- "C:/Users/apdev/Documents/R/win-library/3.3"
to_install <- unname(installed.packages(lib.loc = lib_loc)[, "Package"])
to_install
install.packages(pkgs = to_install)
.Library
# old library location
lib_loc <- "/Users/igocer/Library/R/3.6/library/"
ip = as.data.frame(installed.packages(lib.loc = lib_loc)[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
ip$Package
unname(ip$Package)
?argv
?argparse
?readLines
getwd()
ip$Package
unname(ip$Package)
readtext
readText
readLines("pkgs.txt")
readLines("pkgs.txt")
trimws(readLines("pkgs.txt"))
?install.packages
library(clusterProfiler)
BiocManager::install("clusterProfiler")
shiny::runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp()
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/fwr')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
tabsetPanel(
id = "tabs1",
type = "pills",
),
width = 2
),
mainPanel(
"",
uiOutput("plot_width"),
uiOutput("plot_height")
tags$hr(),
uiOutput("plot_width"),
uiOutput("plot_height")
# tags$hr(),
#
# uiOutput("plot_width"),
#
# uiOutput("plot_height")
# tags$hr(),
#
# uiOutput("plot_width"),
#
# uiOutput("plot_height")
shiny::runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
?rangesider
?rangeslider
library(plotly)
?rangeslider
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
plotly_example("shiny", "proxy_restyle_economics")
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
runApp('OneDrive/programming/clams')
install.pacakges("msa")
install.packages("msa")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
library(msa)
system.file("tex", "texshade.sty", package="msa")
?system.file
system.file("examples", "exampleAA.fasta", package="msa")
mySequenceFile <- system.file("~/OneDrive/fzd_human_all.fasta")
mySequences <- readAAStringSet(mySequenceFile)
mySequenceFile <- system.file("~/OneDrive/fzd_human_all.fasta")
mySequenceFile
mySequenceFile <- "~/OneDrive/fzd_human_all.fasta"
mySequences <- readAAStringSet(mySequenceFile)
mySequences
msa_default = msa(mySequences)
msa_default
print(msa_default, show="complete")
msaPrettyPrint(msa_default, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
print(msa_default, show="complete", subset = c(1,6))
shiny::runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
runApp()
runApp('OneDrive/programming/clams')
file <- input$file1
ext <- tools::file_ext(file)[1]
file <- read_delim("2019-12-04_classic.csv", delim = ',',col_types = "ciciddddiiiiiiiidd")
setwd("~/OneDrive/programming/clams/")
file <- read_delim("2019-12-04_classic.csv", delim = ',',col_types = "ciciddddiiiiiiiidd")
data = file
subject_list = unique(data$subject)
parameters = column_specs %>% dplyr::filter(parameter == 1) %>% select(name_app) %>% pull
names(parameters) = column_specs %>% filter(parameter == 1) %>% select(display_app) %>% pull
interval = find_interval(data, subject, date_time, interval)
# constants ------------------------------------------------
column_specs = suppressMessages(read_delim("clams_column_specification.txt", delim = '\t'))
aggregate_by = aggregate_with_specs(column_specs)
aggregate_with_specs = function(specs) {
function(select_param) {
by = specs %>% dplyr::filter(name_app == select_param) %>% dplyr::select(aggregate) %>% as.character
return(get(by))
}
}
aggregate_by = aggregate_with_specs(column_specs)
data = file
subject_list = unique(data$subject)
parameters = column_specs %>% dplyr::filter(parameter == 1) %>% select(name_app) %>% pull
names(parameters) = column_specs %>% filter(parameter == 1) %>% select(display_app) %>% pull
interval = find_interval(data, subject, date_time, interval)
# functions -----------------------------------------------
find_interval = function(df, group_col, date_time_col, id_col) {
date_time_df = df %>% pivot_wider(names_from = {{group_col}}, values_from = {{date_time_col}}, id_cols = {{id_col}})
interval = map_dfr(date_time_df[-1], function(x) {diff(x %>% as_datetime) %>% as.integer}) %>%
pivot_longer(everything(), names_to = "subject", values_to = "interval") %>%
dplyr::select(interval) #%>%
# unique %>%
# pull
return(interval)
}
interval = find_interval(data, subject, date_time, interval)
View(interval)
interval = find_interval(data, subject, date_time, interval)
View(interval)
# functions -----------------------------------------------
find_interval = function(df, group_col, date_time_col, id_col) {
date_time_df = df %>% pivot_wider(names_from = {{group_col}}, values_from = {{date_time_col}}, id_cols = {{id_col}})
interval = map_dfr(date_time_df[-1], function(x) {diff(x %>% as_datetime) %>% as.integer}) #%>%
#pivot_longer(everything(), names_to = "subject", values_to = "interval") %>%
#dplyr::select(interval) #%>%
# unique %>%
# pull
return(interval)
}
interval = find_interval(data, subject, date_time, interval)
View(interval)
